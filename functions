#!/usr/bin/bash
## This script is under license BEER-WARE.
# "THE BEER-WARE LICENSE" (Revision 42):
# <eric@obarun.org> wrote this file.  As long as you retain this notice you
# can do whatever you want with this stuff. If we meet some day, and you think
# this stuff is worth it, you can buy me a beer in return.   Eric Vidal
shopt -s extglob
##		Shell color 

bold=$(tput bold)
reset=$(tput sgr0)
red=$(tput setaf 1)
bred=${bold}$(tput setaf 1)
green=$(tput setaf 2)
bgreen=${bold}$(tput setaf 2)
yellow=$(tput setaf 3)
byellow=${bold}$(tput setaf 3)
blue=$(tput setaf 4)
bblue=${bold}$(tput setaf 4)

## 		Some variables

editor="mcedit"
config_dir="obarun"
newroot="/mnt"
pacmanEdit=""
cache_dir=""
arch_list=""
aur_list=""
edit_custom=""
gen_dir=`pwd`/config
file_mounted=""

## 		Information display by the script 

echo_bold(){
	echo "${bold}${1}${reset}"
}
echo_info(){
	echo "${byellow}==>>${1}${reset}"
}
echo_retry(){
	echo "${bblue}==>>${1}${reset}"
}
echo_valid(){
	echo "${bgreen}==>>${1}${reset}"
}
echo_display(){
	echo "${bold}==>>${1}${reset}"
}
answer(){
	echo_retry " Please answer y or n :"
}

## 		Exit

die (){
      local message code 
      message="$1"
      [[ -n "$2" ]] && code="$2" || code=1
      if [[ -n "$message" ]] ; then
        echo "${bred}==>> Error: ${message}; exit status ${code}${reset}"
      else
        echo "${bred}==>> Error: exiting with status ${code}${reset}"
      fi
      exit 1
}

## 		Check list option

check_elements(){
	for e in "${@:2}"; do [[ $e == $1 ]] && break; done;
}

## 		Select, check editor

select_editor(){
	editors_list=("nano" "vi" "mcedit");
	echo_display " Select your editor :"
	select editor in "${editors_list[@]}"; do
		if check_elements "$editor" "${editors_list[@]}"; then
			echo_valid " Your editor is now : $editor"
		break
		else 
			echo_retry " Invalid option, enter 1 or 2 :"
		fi
	done
}

check_editor(){
	if [[ "$editor" == "" ]]; then
		editor="mcedit"
	fi
}

## 		Select config directory

choose_dir(){
	dir_list=$(ls -U `pwd`/config/)
	echo_display " Select the directory you want to use :"
	select dir in $dir_list; do
		if check_elements "$dir" $dir_list; then
			config_dir="$dir"	 
		break
		else 
			echo_retry " Invalid number, retry :"
		fi
	done
	echo_valid " You chose $config_dir"
}

##		Choose cache directory for pacman

choose_cache(){
	echo_display " Enter the path for your own cache directory"
	read cache_dir
	echo_valid " Your cache directory is now : $cache_dir"
}

## 		Edit pacman.conf

edit_pacman(){
	check_editor
	"$editor" "$gen_dir"/"$config_dir"/pacman.conf		
}

## 		Edit customizeChroot file

edit_customize_chroot(){
	check_editor
	"$editor" "$gen_dir"/"$config_dir"/customizeChroot
}

## 		Create temporary users for yaourt

user_tmp(){
	if [[ $(awk -F':' '{ print $1}' /etc/passwd | grep usertmp) </dev/null ]]; then
		echo_info " Create a temporary user needed to install AUR packages"
			if [[ -e /etc/sudoers ]]; then
				useradd -m -g users -G "wheel,disk,storage,optical,floppy,adm,network" -s /bin/bash usertmp || die " Impossible to create user : usertmp"
				echo "%usertmp ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
			else
				echo "${bred}==>> The file /etc/sudoers doesn't exists,"
				echo_info " Installing sudo package"
				pacman -S sudo
				user_tmp
			fi
	fi
}

##		Delete usertmp

rem_usertmp(){
	echo_info " Removing user : usertmp"
	userdel -r usertmp
	sed -i '/usertmp/d' /etc/sudoers
}
## 		Clean on exit

clean_install(){
	check_mounted
	if [[ "$file_mounted" != "" ]]; then
		echo_info " Umount filesystem in $newroot"
		umount -R /mnt/{proc,sys,dev,tmp,run}
	fi
	if [[ $(awk -F':' '{ print $1}' /etc/passwd | grep usertmp) >/dev/null ]]; then
		rem_usertmp
	else
	exit
	fi
}
		
## 		Select root directory

rootdir(){	
	echo_display " Enter your root directory :"
	read newroot
	
	until [[ -d "$newroot" ]]; do
		echo_retry " This is not a directory, please retry :"
		read newroot
	done
	
	while ! mountpoint -q "$newroot"; do
		echo_retry " This is not a valide mountpoint, please retry :"
		rootdir
	done
	
	echo_valid " Your root directory for installation is now : $newroot"
}

## Check if needed packages is installed

check_pac_needed(){
	if [[ ! $(pacman -Qs arch-install-scripts) >/dev/null ]]; then
		echo_info " Installing arch-install-scripts"
		pacman -S arch-install-scripts --config "$gen_dir"/"$config_dir"/pacman.conf || die " Impossible to install the package arch-install-scripts"
	else
		echo_valid " arch-install-scripts : already installed"
	fi
	if [[ ! $(pacman -Qs yaourt) >/dev/null ]]; then
		echo_info " Installing yaourt"
		pacman -S base-devel package-query yaourt --config "$gen_dir"/"$config_dir"/pacman.conf || die " Impossible to install the package arch-install-scripts"
	else
		echo_valid " yaourt : already installed"
	fi
}

## 		Install packages with pacman

pac_install(){
	if [[ "$cache_dir" = "" ]]; then
		pacman -r "$newroot" -S $(grep -h -v ^# $gen_dir/$config_dir/package_list/repo_*) --config "$gen_dir"/"$config_dir"/pacman.conf --noconfirm || die " Failed to install packages"
	else
		pacman -r "$newroot" -S $(grep -h -v ^# $gen_dir/$config_dir/package_list/repo_*) --config "$gen_dir"/"$config_dir"/pacman.conf --cachedir "$cache_dir" --noconfirm || die " Failed to install packages"
	fi
}

## 		Install package from aur

aur_install(){
	sudo -u usertmp yaourt -r "$newroot" -Sy $(grep -h -v ^# $gen_dir/$config_dir/package_list/aur_*) --noconfirm || die " Failed to install packages"
}
	
## 		Create needed directory

create_dir(){
	if [[ $(ls $newroot | grep proc) = "" ]]; then 
		echo_info " Create needed directory in ${newroot}"
		mkdir -m 0755 -p "$newroot"/var/{cache/pacman/pkg,lib/pacman,log} "$newroot"/{dev,run,etc}
		mkdir -m 0755 -p "$newroot"/dev/{pts,shm}
		mkdir -m 1777 -p "$newroot"/tmp
		mkdir -m 0555 -p "$newroot"/{sys,proc}
	else
		echo_info " Directory needed already exists"
	fi
}
check_mounted(){
	file_mounted=$(mount | grep "$newroot"/proc)
}
## 		Mounting necessary directory

mount_dir(){
	check_mounted
	if [[ $(mountpoint "$newroot" | grep not) != "" ]]; then
			echo_retry " This is not a valid mountpoint"
			echo_retry " You need to mount a device on $newroot or choose another directory"
			(sleep 4) && echo_info " Returning to the main_menu" && (sleep 1) && main_menu
	fi
	if [[ "$file_mounted" = "" ]]; then
		echo_info " Mounting filesystem in ${newroot}"
		mount -o nosuid,noexec,nodev -t proc proc "$newroot"/proc
		mount -o nosuid,noexec,nodev -t sysfs sys "$newroot"/sys 
		mount -o mode=0755,nosuid -t devtmpfs udev "$newroot"/dev 
		mount -o mode=0620,gid=5,nosuid,noexec -t devpts devpts "$newroot"/dev/pts 
		mount -o mode=1777,nosuid,nodev -t tmpfs shm "$newroot"/dev/shm 
		mount -o nosuid,nodev,mode=0755 -t tmpfs run "$newroot"/run 
		mount -o mode=1777,strictatime,nodev,nosuid -t tmpfs tmp "$newroot"/tmp 
	else
		echo_info " Filesystem already mounted in ${newroot}"
	fi
}

## 		Main menu

main_menu(){

step=100

while [[ "$step" !=  10 ]]; do
	clear
	echo_bold ""
	echo_bold ""
	echo_bold "*****************************************"
	echo_bold "              Main menu"
	echo_bold "*****************************************"
	echo_bold " Assumptions :"
	echo_bold "		- User has partitioned, formatted, and mounted partitions on a directory"
	echo_bold "		- Network is functional"
	echo_bold "		- A valid mirror appears in /etc/pacman.d/mirrorlist"
	echo_bold "		- Defaults for the options are specified in brackets"
	echo_bold ""
	echo_bold ""
	echo_bold " 1  -  Select Editor [mcedit]"
	echo_bold " 2  -  Choose the directory contening configuration files [obarun]"
	echo_bold " 3  -  Edit the pacman.conf used by the script"
	echo_bold " 4  -  Define your own cache directory for pacman [host]"
	echo_bold " 5  -  Edit the packages lists (AUR including) from repo defined in pacman.conf"
	echo_bold " 6  -  Edit the scripts which configure the fresh installation"
	echo_bold " 7  -  Enter your root directory of the installation [/mnt]"
	echo_bold " 8  -  Install the new system"
	echo_bold " 9  -  Exit installation script"
	echo_bold ""
	echo_bold ""
	echo_display " Enter your choice :";read  step

		case "$step" in 
			1)	select_editor;;
			2)	choose_dir;; # Never comment this options
			3)	edit_pacman;;
			4)	choose_cache;;
			5)	select_list;;
			6)	edit_customize_chroot;;
			7)	rootdir;; # Never comment this options
			8)	install_system;;	
			9)	echo_info " Exiting"
				exit;;
			*) echo_retry " Please enter a number between 1-9: "
		esac
		echo_display " Press enter to return to the Main menu"
		read enter 
done
}

select_list(){
	check_editor
	pac_list=$(ls "$gen_dir"/"$config_dir"/package_list/)
	echo_info " File named repo_* concerns the packages provides by repositories defined in pacman.conf"
	echo_info " File named aur_* concerns the packages from AUR"
	echo_display " Select the list you want to edit :"
	select list in $pac_list; do
		if check_elements "$list" $pac_list; then
			"$editor" "$gen_dir"/"$config_dir"/package_list/"$list"
		break
		else 
			echo_retry " Invalid number, retry :"
		fi
	done
}
install_system(){

user_tmp
create_dir
mount_dir

##		Copying file needed

echo_info " Copy needed file in ${newroot}"
cp /etc/resolv.conf "$newroot"/etc/resolv.conf || die " Impossible to copy the file resolv.conf"
cp "$gen_dir"/"$config_dir"/customizeChroot "$newroot"/etc/customizeChroot || die " File customizeChroot not exist"

##		Sync database

echo_info " Synchronize database and check needed packages"
pacman -r "$newroot" -Syy --config "$gen_dir"/"$config_dir"/pacman.conf || die " Impossible to synchronize database"
check_pac_needed

##		Install packages

echo_info " Install packages from lists"
pac_install || die " Impossible to install packages" 
aur_install || die " Impossible to install packages"

echo_info " Generate fstab"
genfstab -p "$newroot" >> "$newroot"/etc/fstab || die " Impossible to generate fstab"
echo_info " Copying configuration files in ${newroot}"
cp -af `pwd`/config/"$config_dir"/rootfs/* "$newroot"/ || die " Impossible to copy files"

##		Customize newroot

echo_info " Enter in chroot of ${newroot}"
chroot "$newroot" /etc/customizeChroot || die " Failed to enter in : ${newroot} or Failed to execute correctly the file"

}
