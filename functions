#!/usr/bin/sh
## This script is under license BEER-WARE.
# "THE BEER-WARE LICENSE" (Revision 42):
# <eric@obarun.org> wrote this file.  As long as you retain this notice you
# can do whatever you want with this stuff. If we meet some day, and you think
# this stuff is worth it, you can buy me a beer in return.   Eric Vidal
shopt -s extglob
##		Shell color 

bold=$(tput bold)
reset=$(tput sgr0)
red=$(tput setaf 1)
bred=${bold}$(tput setaf 1)
green=$(tput setaf 2)
bgreen=${bold}$(tput setaf 2)
yellow=$(tput setaf 3)
byellow=${bold}$(tput setaf 3)
blue=$(tput setaf 4)
bblue=${bold}$(tput setaf 4)

## 		Some variables

editor="mcedit"
config_dir="openbox"
newroot="/mnt"
pacmanEdit=""
cache_dir="/var/cache/pacman/pkg"
gen_dir=`pwd`/config
file_mounted=""
newuser=""
zone=""
subzone=""
hostname=""
locale="" 
locale_rc=""
pack=0
yaourt_cache="$newroot/var/cache/pacman/pkg/yaourt"
tmp_yaourt="$yaourt_cache/tmp/"
enter_count=0

## 		Information display by the script 

echo_bold(){
	echo "${bold}${1}${reset}"
}
echo_info(){
	echo "${byellow}==>>${1}${reset}"
}
echo_retry(){
	echo "${bblue}==>>${1}${reset}"
}
echo_valid(){
	echo "${bgreen}==>>${1}${reset}"
}
echo_display(){
	echo "${bold}==>>${1}${reset}"
}
answer(){
	echo_retry " Please answer y or n :"
}

## 		Exit

die (){
      local message code 
      message="$1"
      [[ -n "$2" ]] && code="$2" || code=1
      if [[ -n "$message" ]] ; then
        echo "${bred}==>> Error: ${message}; exit status ${code}${reset}"
      else
        echo "${bred}==>> Error: exiting with status ${code}${reset}"
      fi
      exit 1
}

## 		Clean on exit

clean_install(){
	check_mounted
	if [[ "$file_mounted" != "" ]]; then
		echo_info " Umount filesystem in $newroot"
		umount -R /mnt/{proc,sys,dev,tmp,run}
	fi
	if [[ $(awk -F':' '{ print $1}' /etc/passwd | grep usertmp) >/dev/null ]]; then
		echo_info " Removing user usertmp"
		rem_usertmp
	fi
	if [[ -e /etc/yaourtrc.ori.obarun ]]; then
		mv /etc/yaourtrc.ori.obarun /etc/yaourtrc
	fi
	if [[  -e "$newroot/etc/functions" ]]; then
		rm "$newroot/etc/functions" || die "File functions not exist"
	fi
	if [[  -e "$newroot/etc/customizeChroot" ]]; then
		rm "$newroot/etc/customizeChroot" || die " File customizeChroot not exist"
	fi
	if [[ -d "$newroot/var/cache/pacman/pkg/yaourt" ]]; then
		echo_info " To avoid problem when cleaning cache directory with pacman,"
		echo_info " the yaourt cache direcotry is erased"
		rm -R "$newroot/var/cache/pacman/pkg/yaourt"
	fi
	exit
}

rem_usertmp(){
	echo_info " Removing user : usertmp"
	userdel -r usertmp
	sed -i '/usertmp/d' /etc/sudoers
}

## 		Create needed directory

create_dir(){
	if [[ $(ls $newroot | grep proc) = "" ]]; then 
		echo_info " Create needed directory in ${newroot}"
		mkdir -m 0755 -p "$newroot"/var/{cache/pacman/pkg,lib/pacman,log} "$newroot"/{dev,run,etc}
		mkdir -m 0755 -p "$newroot"/dev/{pts,shm}
		mkdir -m 1777 -p "$newroot"/tmp
		mkdir -m 0555 -p "$newroot"/{sys,proc}
	else
		echo_valid " Directory needed already exists"
	fi
}

##		check if $newroot is a valid mountpoint

check_mountpoint(){
	if ! mountpoint -q "$newroot"; then
			echo_retry " This is not a valid mountpoint"
			echo_retry " You need to mount a device on $newroot or choose another directory"
			(sleep 4) && echo_info " Returning to the main_menu" && (sleep 1) && main_menu
	fi
}

##		Already mounted or not

check_mounted(){
	file_mounted=$(mount | grep "$newroot"/proc)
}

## 		Mounting necessary directory

mount_dir(){
	check_mounted
	if [[ "$file_mounted" = "" ]]; then
		echo_info " Mounting filesystem in ${newroot}"
		mount -o nosuid,noexec,nodev -t proc proc "$newroot"/proc
		mount -o nosuid,noexec,nodev -t sysfs sys "$newroot"/sys 
		mount -o mode=0755,nosuid -t devtmpfs dev "$newroot"/dev 
		mount -o mode=0620,gid=5,nosuid,noexec -t devpts devpts "$newroot"/dev/pts 
		mount -o mode=1777,nosuid,nodev -t tmpfs shm "$newroot"/dev/shm 
		mount -o nosuid,nodev,mode=0755 -t tmpfs run "$newroot"/run 
		mount -o mode=1777,strictatime,nodev,nosuid -t tmpfs tmp "$newroot"/tmp 
	else
		echo_valid " Filesystem already mounted in ${newroot}"
	fi
}

## 		Check list option

check_elements(){
	for e in "${@:2}"; do [[ $e == $1 ]] && break; done;
}

## 		Select, check editor

select_editor(){
	editors_list=("nano" "vi" "mcedit");
	echo_display " Select your editor :"
	select editor in "${editors_list[@]}"; do
		if check_elements "$editor" "${editors_list[@]}"; then
			echo_valid " Your editor is now : $editor"
		break
		else 
			echo_retry " Invalid option, enter 1 or 2 :"
		fi
	done
}

check_editor(){
	if [[ "$editor" == "" ]]; then
		editor="mcedit"
	fi
}

## 		Select config directory

choose_dir(){
	dir_list=$(ls -U `pwd`/config/)
	echo_display " Select the directory you want to use :"
	select dir in $dir_list; do
		if check_elements "$dir" $dir_list; then
			config_dir="$dir"
			sed -i "s,EXPORTDIR=\".*$,EXPORTDIR=\"$yaourt_cache\/\",g" $gen_dir/$config_dir/yaourtrc
			sed -i "s,TMPDIR=\".*$,TMPDIR=\"$yaourt_cache\/tmp\/\",g" $gen_dir/$config_dir/yaourtrc 	 
		break
		else 
			echo_retry " Invalid number, retry :"
		fi
	done
	echo_valid " You chose $config_dir"
}

##		Choose cache directory for pacman

choose_cache(){
	echo_display " Enter the path for your own cache directory"
	read cache_dir
	while [[ ! -d "$cache_dir" ]]; do
		echo_retry " $cache_dir is not a directory, please retry:"
		read cache_dir
	done
	while [[ $(ls $cache_dir | grep "pkg.tar.xz") = "" ]]; do
		echo_retry " Is not a valid directory for pacman, please retry:"
		read cache_dir
	done
	echo_valid " Your cache directory is now : $cache_dir"
}

## 		Edit pacman.conf

edit_pacman(){
	check_editor
	"$editor" "$gen_dir/$config_dir/pacman.conf"		
}

## 		Edit customizeChroot file

edit_customize_chroot(){
	check_editor
	"$editor" "$gen_dir/$config_dir/customizeChroot"
	if [[ -d "$newroot/etc" ]]; then
		cp -f "$gen_dir/$config_dir/customizeChroot" "$newroot/etc/customizeChroot" || die " File customizeChroot not exist"
	fi
}

## 		Create temporary users for yaourt

user_tmp(){
	if [[ $(awk -F':' '{ print $1}' /etc/passwd | grep usertmp) </dev/null ]]; then
		echo_info " Create a temporary user needed to install AUR packages"
			if [[ -e /etc/sudoers ]]; then
				useradd -m -g users -G "wheel,disk,storage,optical,floppy,adm,network" -s /bin/bash usertmp || die " Impossible to create user : usertmp"
				echo "%usertmp ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
			else
				echo "${bred}==>> The file /etc/sudoers doesn't exists,"
				echo_info " Installing sudo package"
				pacman -S sudo
				user_tmp
			fi
	fi
}

		
## 		Select root directory

rootdir(){	
	echo_display " Enter your root directory :"
	read newroot
	
	until [[ -d "$newroot" ]]; do
		echo_retry " This is not a directory, please retry :"
		read newroot
	done
	
	while ! mountpoint -q "$newroot"; do
		echo_retry " This is not a valide mountpoint, please retry :"
		read newroot
	done
	
	echo_valid " Your root directory for installation is now : $newroot"
}

## Check if needed packages is installed

check_pac_needed(){
	if [[ ! $(pacman -Qs arch-install-scripts) >/dev/null ]]; then
		echo_info " Installing arch-install-scripts"
		pacman -S arch-install-scripts --config "$gen_dir/$config_dir/pacman.conf" || die " Impossible to install the package arch-install-scripts"
	else
		echo_valid " arch-install-scripts : already installed"
	fi
	if [[ ! $(pacman -Qs yaourt) >/dev/null ]]; then
		echo_info " Installing yaourt"
		pacman -S base-devel package-query yaourt --config "$gen_dir/$config_dir/pacman.conf" || die " Impossible to install the package arch-install-scripts"
	else
		echo_valid " yaourt : already installed"
	fi
}

##		Select packages list

select_list(){
	check_editor
	pac_list=$(ls "$gen_dir"/"$config_dir"/package_list/ | grep -v "yaourt_cache")
	pac_list+=" Exit"
	echo_info " File named repo_* concerns the packages provides by repositories defined in pacman.conf"
	echo_info " File named aur_* concerns the packages from AUR"
	echo_display " Select the list you want to edit then select Exit number to return at main menu :"
	select list in $pac_list; do
		case "$list" in
			Exit)break;;
			*)if check_elements "$list" $pac_list; then
				"$editor" "$gen_dir/$config_dir/package_list/$list"
			  else 
				echo_retry " Invalid number, retry :"
			  fi
		esac
	done
}

## 		Install packages with pacman

pac_install(){
		pacman -r "$newroot" -S $(grep -h -v ^# $gen_dir/$config_dir/package_list/repo_*) --config "$gen_dir/$config_dir/pacman.conf" --cachedir "$cache_dir" --noconfirm 2>/dev/null || die " Failed to install packages"
}

## 		Install package from aur

aur_install(){
	if [[ ! -d "$newroot/var/lib/pacman/sync" ]]; then 
		sync="y"
	else
		sync=""
	fi
	if [[ ! -d "$yaourt_cache" ]]; then
		mkdir -p -m777  "$yaourt_cache"
		mkdir -p -m777 "$tmp_yaourt"
	fi
	if [[ ! -e /etc/yaourtrc.ori.obarun ]]; then
		if [[ -e /etc/yaourtrc ]]; then
			mv /etc/yaourtrc /etc/yaourtrc.ori.obarun
		fi
		cp "$gen_dir/$config_dir/yaourtrc" /etc/yaourtrc || die " yaourtrc file not exist"
		sed -i "s,#TMPDIR=\".*$,TMPDIR=\"$tmp_yaourt\",g" /etc/yaourtrc
		sed -i "s,#EXPORTDIR=\".*$,EXPORTDIR=\"$yaourt_cache\",g" /etc/yaourtrc
		sed -i "s,#EXPORT=.*$,EXPORT=1,g" /etc/yaourtrc
		sed -i "s,TMPDIR=\".*$,TMPDIR=\"$tmp_yaourt\",g" /etc/yaourtrc
		sed -i "s,EXPORTDIR=\".*$,EXPORTDIR=\"$yaourt_cache\",g" /etc/yaourtrc
		sed -i "s,EXPORT=.*$,EXPORT=1,g" /etc/yaourtrc
	fi	
	aur_cache
}

aur_cache(){
	local y_cache
	ls -1 -p $yaourt_cache/ | grep -v '/$' | grep -v "gz" | sed 's/-[0-9]/ = /g' | awk -F "=" '{ print $1 }' > $yaourt_cache/tmplist
	y_cache=$(cat $gen_dir/$config_dir/package_list/aur_* | grep -v "#" | sed  '/^ *$/d')
	for i in $y_cache;do
		if [[ $(sed -n '1,$p' "$i" 2&>/dev/null | grep "$i" $yaourt_cache/tmplist) != "" ]]; then
			sudo -u usertmp yaourt -r "$newroot" -U"$sync" "$yaourt_cache"/$i*.xz --noconfirm || die " Failed to install packages"
		else
			sudo -u usertmp yaourt -r "$newroot" -S"$sync" "$i" --noconfirm || die " Failed to install packages"
		fi
	done
}

##		Copying file needed

copy_file(){
	echo_info " Copy needed file in ${newroot}"
	if [[  ! -e "$newroot/etc/resolv.conf" ]]; then 
		cp /etc/resolv.conf "$newroot/etc/resolv.conf" || die " Impossible to copy the file resolv.conf"
	else
		echo_valid " File resolv.cong already exist"
	fi
	if [[ ! -e "$newroot/etc/functions" ]]; then
		cp "`pwd`/functions" "$newroot/etc/functions" || die "File functions not exist"
	else
		echo_valid " File functions already exist"
	fi
	if [[ ! -e "$newroot/etc/customizeChroot" ]]; then
		cp "$gen_dir/$config_dir/customizeChroot" "$newroot/etc/customizeChroot" || die " File customizeChroot not exist"
	else
		echo_valid " File customizeChroot already exist"
	fi
}
	
##		Sync database

sync_data(){
	if [[ ! -d "$newroot/var/lib/pacman/sync" ]]; then 
		mkdir -p "$newroot/var/lib/pacman/sync/"	
		cp /var/lib/pacman/sync/*.db "$newroot/var/lib/pacman/sync/" || die "/var/lib/pacman/sync/*.db doesn't exit on host"
	fi
	echo_info " Synchronize database and check needed packages"
	pacman -r "$newroot" -Syy --config "$gen_dir/$config_dir/pacman.conf" || die " Impossible to synchronize database"	
}

##		Install packages if pack = 1

install_pack(){
	if [[ "$pack" == 0 ]]; then
		echo_info " Install packages from lists"
		pac_install || die " Impossible to install packages from repository" 
		aur_install || die " Impossible to install packages from AUR"
	fi
}

##		Generate fstab

gen_fstab(){
	echo_info " Generate fstab"
	genfstab -p "$newroot" > "$newroot/etc/fstab" || die " Impossible to generate fstab"
}

##		Copy directory rootfs in $newroot

copy_rootfs(){
	echo_info " Copying configuration files in ${newroot}"
	cp -af `pwd`/config/"$config_dir"/rootfs/* "$newroot"/ || die " Impossible to copy files"
}

##		Customize newroot

enter_chroot(){
	echo_info " Enter in chroot of ${newroot}"	
	if [[ ! -e "$newroot/etc/functions" ]]; then
		cp "`pwd`/functions" "$newroot/etc/functions" || die "File functions not exist"
	else
		echo_valid " File functions already exist"
	fi
	if [[ ! -e "$newroot/etc/customizeChroot" ]]; then
		cp "$gen_dir/$config_dir/customizeChroot" "$newroot/etc/customizeChroot" || die " File customizeChroot not exist"
	else
		echo_valid " File customizeChroot already exist"
	fi
	chroot "$newroot" /etc/customizeChroot || die " Failed to enter in ${newroot} or Failed to execute correctly the file"
}

##		Enter in $newroot with mc

mc_newroot(){
	mc "$newroot/"
}

##		Open an interactive shell on newroot

call_shell(){
	echo_info " Tape exit when you have finished"
	zsh -c "cd $newroot; exec zsh -i"	
}

##		Define root user

define_root(){
	if [[ ! $(cat $newroot/etc/shadow | grep "root::") == "" ]]; then
		echo_info " Modify root user"
		usermod -R "$newroot" -s /usr/bin/zsh root
		cp -aT "$newroot/etc/skel/" "$newroot/root/"
		echo_info " You need to define root password"
		pass_root
		echo_valid " root user was modified successfully"
	fi
	if [[ -e "$newroot/root/.zlogin" ]]; then
		echo_info " Removing auto-login for root"
		rm "$newroot/root/.zlogin"
	fi
}

pass_root(){
	passwd -R "$newroot" root
	while [[ $? -ne 0 ]]; do
		echo_retry " Password do not match, please retry"
		passwd -R "$newroot" root
	done
}
## 		Main menu

main_menu(){

locale step=100

while [[ "$step" !=  10 ]]; do
	clear
	echo_bold ""
	echo_bold ""
	echo_bold "***************************************************************************************"
	echo_bold "                            Main menu"
	echo_bold "***************************************************************************************"
	echo_bold " Assumptions :"
	echo_bold "		- User has partitioned, formatted, and mounted partitions on a directory"
	echo_bold "		- Network is functional"
	echo_bold "		- A valid mirror appears in /etc/pacman.d/mirrorlist"
	echo_bold "		- Defaults for the options are specified in brackets"
	echo_bold ""
	echo_bold ""
	echo_bold " 1  -  Select Editor [$editor]"
	echo_bold " 2  -  Choose the directory contening configuration files [$config_dir]"
	echo_bold " 3  -  Edit the pacman.conf used by the script"
	echo_bold " 4  -  Define your own cache directory for pacman [$cache_dir]"
	echo_bold " 5  -  Edit the packages lists (AUR including) from repo defined in pacman.conf"
	echo_bold " 6  -  Enter your root directory of the installation [$newroot]"
	echo_bold " 7  -  Install the new system"
	echo_bold " 8  -  Resume an aborted install (packages are already installed at $newroot)"
	echo_bold " 9  -  Enter in chroot of ${newroot} and launch the script customizeChroot"
	echo_bold " 10 -  Exit installation script"
	echo_bold ""
	echo_bold "***************************************************************************************"
	echo_bold "                            Options"
	echo_bold "***************************************************************************************"
	echo_bold ""
	echo_bold " 11 -  Browse $newroot with Midnight Commander"	
	echo_bold " 12 -  Edit the script customizeChroot which configure the fresh installation"
	echo_bold " 13 -  Open an interactive shell at root directory [$newroot]" 	
	echo_bold ""
	echo_bold ""
	echo_info " Enter your choice :";read  step

		case "$step" in 
			1)	select_editor;;
			2)	choose_dir;; # Never comment this options
			3)	edit_pacman;;
			4)	choose_cache;;
			5)	select_list;;
			6)	rootdir;; # Never comment this options
			7)	install_system;;
			8)	pack=1
				install_system;;
			9)	enter_chroot;;
			10)	echo_info " Exiting"
				exit;;
			11) mc_newroot;;
			12)	edit_customize_chroot;;
			13) call_shell;;
			*) echo_retry " Invalid number, Please retry: "
		esac
		echo_info " Press enter to return to the Main menu"
		read enter 
done
}

##		Start the installation

install_system(){
	check_mountpoint
	create_dir
	mount_dir
	user_tmp
	copy_file
	sync_data
	check_pac_needed
	install_pack
	gen_fstab
	copy_rootfs
	define_root
	pack=0
}

#####################################		Functions for customizeChroot script

## 		CustomizeChroot menu

customizeChroot_menu(){

locale step=100

while [[ "$step" !=  8 ]]; do
	clear
	echo_bold ""
	echo_bold ""
	echo_bold "**************************************************************"
	echo_bold "              CustomizeChroot menu"
	echo_bold "**************************************************************"
	echo_bold ""
	echo_bold " 1  -  Define hostname [$hostname]"
	echo_bold " 2  -  Define locale [$locale]"
	echo_bold " 3  -  Define localtime [$zone/$subzone]"
	echo_bold " 4  -  Create a new user [$newuser]"
	echo_bold " 5  -  Edit rc.conf file"
	echo_bold " 6  -  Edit the fresh installation with Midnight Commander"
	echo_bold " 7  -  Exit customization menu and continue the installation"
	echo_bold " 8  -  Return to the main menu"
	echo_bold ""
	echo_bold ""
	echo_info " Enter your choice :";read  step

		case "$step" in 
			1)	define_hostname;;
			2)	define_locale;; 
			3)	call_localtime;;
			4)	define_user;;
			5)	edit_rc_conf;;
			6)	mc_enter;;
			7)	echo_info " Continue installation"
				break;;
			8)	exit;;
			*) echo_retry " Invalid number, please retry:"
		esac
		echo_info " Press enter to return to the customizeChroot menu"
		read enter 
done
}

##		Define resolv.conf

define_resolv(){
	echo_info " Define resolv.conf"
	if [[ -e /etc/resolv.conf.pacorig ]]; then 
		mv /etc/resolv.conf.pacorig /etc/resolv.conf
	fi
}


##		Enter in the fresh installation with mc

mc_enter(){
	mc /
}

## 		Define hostname

define_hostname(){
	if [[ "$hostname" != "" ]]; then
		sed -i 's/ .*$//' /etc/hosts
	fi
	echo_display " Enter your hostname"
	read hostname
	sed -i "s/HOSTNAME=\".*$/HOSTNAME=\"$hostname\"/g" /etc/rc.conf
	echo "$hostname" > /etc/hostname
	sed -i '/127.0.0.1/s/$/ '$hostname'/' /etc/hosts
	sed -i '/::1/s/$/ '$hostname'/' /etc/hosts
	echo_valid " hostname is now : $hostname"
}

##		Edit rc.conf

edit_rc_conf(){
	"$editor" /etc/rc.conf
}

##		Define locale

define_locale(){
	echo_info " Define your locale by uncomment desired line, only one line is allowed ($editor will be launch in 2 sec)"
	sleep 02
	"$editor" /etc/locale.gen
	locale-gen
	locale=$(grep -v "#" /etc/locale.gen | awk -F " " '{ print $1 }')
	echo LANG="$locale" > /etc/locale.conf
    echo LC_COLLATE=C >> /etc/locale.conf
	locale_rc=$(grep -v "#" /etc/locale.gen | sed 's/ UTF-8//g' | awk -F "_" '{ print $1 }')
	sed -i "s,KEYMAP=\".*$,KEYMAP=\"$locale_rc\",g" /etc/rc.conf
	echo_valid " Locale was created successfully"
	# define local for root
	if [[ -e "/root/.xinitrc" ]]; then
		local locale_xinit
		locale_xinit=$(grep -v "#" /etc/locale.gen | sed 's/ UTF-8//g' | awk -F "_" '{ print $1 }')
		echo_info " Define locale in /root/.xinitrc"
		sed -i 's/#setxkbmap.*$/setxkbmap\ '$locale_xinit'\ \&/g' /root/.xinitrc
		sed -i 's/setxkbmap.*$/setxkbmap\ '$locale_xinit'\ \&/g' /root/.xinitrc
	fi
}

##		Define localtime

define_localtime(){
	zone_list=$(ls -d --group-directories-first /usr/share/zoneinfo/* | awk -F "/usr/share/zoneinfo/" '{ print $2 }' | uniq)
	zone_list+=" Exit"
	select zone in $zone_list; do
		case $zone in 
			Exit)customizeChroot_menu
			break;;
			*)if check_elements "$zone" $zone_list; then
				if [[  -d "/usr/share/zoneinfo/$zone" ]]; then
					sub_zone_list=$(ls /usr/share/zoneinfo/$zone/* | awk -F "/usr/share/zoneinfo/$zone/" '{ print $2 }') 
					sub_zone_list+=" Exit"
					select subzone in $sub_zone_list; do
						case $subzone in
							Exit)define_localtime
								break;;
							*)if check_elements "$subzone" $sub_zone_list; then
								break
							else
								echo_retry " Invalid number, retry :"
							fi
						esac
					done
				fi
			break	
			else 
				echo_retry " Invalid number, retry :"
			fi
		esac
	done
}

call_localtime(){
	echo_display " Choose your country/department"
	define_localtime
	if [[ "$subzone" != "" ]]; then
		ln -sf /usr/share/zoneinfo/$zone/$subzone /etc/localtime
		sed -i "s/TIMEZONE=\".*$/TIMEZONE=\"$zone\/$subzone\"/g" /etc/rc.conf
	else
		ln -sf /usr/share/zoneinfo/$zone /etc/localtime
		sed -i "s/TIMEZONE=\".*$/TIMEZONE=\"$zone\"/g" /etc/rc.conf
	fi
	echo_valid " your localtime is now : $zone/$subzone"
}

##		Define a new user

define_user(){
	echo_display " Enter the name for the user"
	read newuser
	while [[ ! $(cat /etc/passwd | grep "$newuser") == "" ]]; do
		echo_retry " $newuser already exit, please enter another name :"
		read newuser
	done
	while [[ ${#newuser} -eq 0 ]] || [[ $newuser =~ \ |\' ]] || [[ $newuser =~ [^a-z0-9\ ] ]]; do
		echo_retry " Invalid user name. Please retry :"
		read newuser
	done
	echo_valid " Create user $newuser"
	useradd -m -g users -G "audio,floppy,log,network,rfkill,scanner,storage,optical,power,wheel,video" -s /usr/bin/zsh "$newuser"
	if [[ -e "/home/$newuser/.xinitrc" ]]; then
		local locale_xinit
		locale_xinit=$(grep -v "#" /etc/locale.gen | sed 's/ UTF-8//g' | awk -F "_" '{ print $1 }')
		sed -i 's/#setxkbmap.*$/setxkbmap\ '$locale_xinit'\ \&/g' /home/$newuser/.xinitrc
		sed -i 's/setxkbmap.*$/setxkbmap\ '$locale_xinit'\ \&/g' /home/$newuser/.xinitrc
	fi
	echo_info " You need to define $newuser password"
	pass_user
	echo_valid " User $newuser was created successfully" 
}

pass_user(){
	passwd "$newuser"
	while [[ $? -ne 0 ]]; do
		echo_retry " Password do not match, please retry"
		passwd "$newuser"
	done
}

	
##		Define/configure Bootloader

edit_syslinux(){
	local reply
	echo_display " Do you want edit syslinux.cfg [y|n]"
	read reply
	while [[ ! "$reply" = @(y|n) ]]; do
		answer
		read reply
	done
	check_editor
	"$editor" "/boot/syslinux/syslinux.cfg"
}

##		Reply functions
## return 0 for yes
## return 1 for no
reply_answer(){
	local reply
	read reply
	while [[ ! "$reply" = @(y|n) ]]; do
		answer
		read reply
	done
	if [ "$reply" == "y" ]; then
		return 0
	else
		return 1
	fi	
}
	
#define_bootloader(){
	
#}

