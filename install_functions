#!/usr/bin/bash
## This script is under license BEER-WARE.
# "THE BEER-WARE LICENSE" (Revision 42):
# <eric@obarun.org> wrote this file.  As long as you retain this notice you
# can do whatever you want with this stuff. If we meet some day, and you think
# this stuff is worth it, you can buy me a beer in return.   Eric Vidal

# functions file for obarun-install package

sourcing(){
	
	local list
	
	for list in /usr/lib/obarun/common_functions /etc/obarun/install.conf; do
		if [[ -f "${list}" ]]; then
			source "${list}"
		else
			echo_error " Missing file : ${list}"
			exit	
		fi
	done
	
	unset list
}
#sourcing

## 		Some global variables needed

HOME_PATH="/var/lib/obarun/obarun-install"
GENERAL_DIR="$HOME_PATH/config"
SOURCES_FUNC="/tmp/obarun-install-tmp"
LOCALTIME="/usr/share/zoneinfo/right"

## 		Clean on exit

clean_install(){
	
	echo_display " Cleaning up"
	# make sure that all process are killed
	# before umounting
	echo_valid " Killing process" 
	kill_process "haveged gpg-agent dirmngr"
	
	echo_valid " Umount $NEWROOT"
	mount_umount "$NEWROOT" "umount"
	
	if [[ $(awk -F':' '{ print $1}' /etc/passwd | grep usertmp) >/dev/null ]]; then
		echo_valid " Removing user usertmp"
		user_del "usertmp" &>/dev/null
	fi
		
	# keep the configuration variable from install.conf
	if [[ -f "$NEWROOT"/"$SOURCES_FUNC"/install.conf ]]; then
		echo_valid " Keeping the configuration from $NEWROOT/$SOURCES_FUNC/install.conf"
		cp -f "$NEWROOT"/"$SOURCES_FUNC"/install.conf /etc/obarun/install.conf
	fi
	
	if [[ -d "$NEWROOT"/"$SOURCES_FUNC" ]]; then
		echo_valid " Remove directory $SOURCES_FUNC"
		rm -r "$NEWROOT"/"$SOURCES_FUNC"
	fi
	
	echo_valid " Restore your shell options"
	shellopts_restore
	
	exit
}

## 		Select, check editor

choose_editor(){
	
	local old_editor _editor
	local -a editor_list
	
	old_editor="$EDITOR"
	
	editors_list=("nano" "vi" "mcedit" "Exit");
	echo_display " Select your editor :"
	select _editor in "${editors_list[@]}"; do
		case "$_editor" in
			Exit)EDITOR="$old_editor"
				break;;
			*)if check_elements "$_editor" "${editors_list[@]}"; then
					echo_valid " Your editor is now : $_editor"
					sed -i "s,EDITOR=.*$,EDITOR=\"$_editor\",g" /etc/obarun/install.conf
					#source /etc/obarun/install.conf
					break
			  else 
					echo_retry " Invalid number, retry :"
			  fi
		esac
	done
	
	unset old_editor _editor editor_list
}

check_editor(){
	if [[ -z "$EDITOR" ]]; then
		EDITOR="mcedit"
	fi
}

## 		Select config directory

choose_config(){
	
	local _directory
	
	dir_list=$(ls -U $GENERAL_DIR)
	echo_display " Select the configuration directory that you want to use :"
	select _directory in ${dir_list[@]}; do
		if check_elements "$_directory" ${dir_list[@]}; then
			CONFIG_DIR="$_directory"	 
			break
		else 
			echo_retry " Invalid number, retry :"
		fi
	done
	echo_valid " You chose $_directory"
	sed -i "s,CONFIG_DIR=.*$,CONFIG_DIR=\"$_directory\",g" /etc/obarun/install.conf
	#source /etc/obarun/install.conf

	unset _directory
}

##		Choose cache directory for pacman

choose_cache(){
	
	local _cache_dir
	echo_display " Enter the path for your own cache directory"
	read -e _cache_dir
	while [[ ! -d "$_cache_dir" ]]; do
		echo_retry " $_cache_dir is not a directory, please retry:"
		read -e _cache_dir
	done
	
	echo_valid " Your cache directory is now : $_cache_dir"
	sed -i "s,CACHE_DIR=.*$,CACHE_DIR=\"$_cache_dir\",g" /etc/obarun/install.conf
	#source /etc/obarun/install.conf
	
	unset _cache_dir
}

## 		Edit pacman.conf

edit_pacman(){
	check_editor
	edit_file "pacman.conf" "$GENERAL_DIR/$CONFIG_DIR" "$EDITOR"	
}

## 		Edit customizeChroot file

edit_customize_chroot(){
	check_editor
	edit_file "customizeChroot" "$GENERAL_DIR/$CONFIG_DIR" "$EDITOR" || die " File customizeChroot not exist, you need to choose number 7 first" "clean_install"
	if [[ -d "$NEWROOT/etc" ]]; then
		echo_display " Copying customizeChroot to $NEWROOT/etc/customizeChroot"
		cp -f "$GENERAL_DIR/$CONFIG_DIR/customizeChroot" "$NEWROOT/etc/customizeChroot" 
	fi
}
	
## 		Select root directory

choose_rootdir(){	
	local _directory
		
	echo_display " Enter your root directory :"
	read -e _directory
		
	until [[ -d "$_directory" ]]; do
		echo_retry " This is not a directory, please retry :"
		read -e _directory
	done
	
	while ! mountpoint -q "$_directory"; do
		echo_retry " This is not a valide mountpoint, please retry :"
		read -e _directory
	done

	echo_valid " Your root directory for installation is now : $_directory"
	NEWROOT="${_directory}"
	sed -i "s,NEWROOT=.*$,NEWROOT=\"$_directory\",g" /etc/obarun/install.conf
	#source /etc/obarun/install.conf
	
	unset _directory
}

##		Select packages list

select_list(){
	local list
	local -a pac_list
	check_editor
	pac_list=$(ls "$GENERAL_DIR"/"$CONFIG_DIR"/package_list/)
	pac_list+=" Exit"
	echo_display " Select the list you want to edit then select Exit number to return at main menu :"
	select list in ${pac_list[@]}; do
		case "$list" in
			Exit)break;;
			*)if check_elements "$list" ${pac_list[@]}; then
				"$EDITOR" "$GENERAL_DIR/$CONFIG_DIR/package_list/$list"
			  else 
				echo_retry " Invalid number, retry :"
			  fi
		esac
	done
	
	unset list pac_list
}

##		Define root user

define_root(){
	
	local pass_exist
	pass_exist=$(grep "root" $NEWROOT/etc/shadow | awk -F':' '{print $2}')
	
	if [[ ! $(grep "root::" $NEWROOT/etc/shadow) ]]; then
		echo_display " Create root user on $NEWROOT"
		usermod -R "$NEWROOT" -s /usr/bin/zsh root
	fi
	
	echo_display " Copy skeleton to $NEWROOT/root/"
	cp -rT "$NEWROOT/etc/skel/" "$NEWROOT/root/"
		
	chmod 0750 "$NEWROOT/root"
	
	if [[ -z "${pass_exist}" ]]; then
		echo_display " You need to define root password"
		pass_root
		echo_valid " root user was modified successfully"
	fi
	
	if [[ -e "$NEWROOT/root/.zlogin" ]]; then
		echo_display " Removing auto-login for root"
		rm "$NEWROOT/root/.zlogin"
	fi
	
	unset pass_exist
}

pass_root(){
	
	passwd -R "$NEWROOT" root

	while [[ $? -ne 0 ]]; do
		echo_retry " Password do not match, please retry"
		passwd -R "$NEWROOT" root
	done
}

## 		Create needed directory

create_dir(){
	echo_display " Check for needed directory"
	if ! [ -d "$NEWROOT/proc" ]; then 
		echo_notvalid " Create needed directory in ${NEWROOT}"
		mkdir -m 0755 -p "$NEWROOT"/var/{cache/pacman/pkg,lib/pacman,log} "$NEWROOT"/{dev,run,etc}
		mkdir -m 0755 -p "$NEWROOT"/dev/{pts,shm}
		mkdir -m 1777 -p "$NEWROOT"/tmp
		mkdir -m 0555 -p "$NEWROOT"/{sys,proc}
	else
		echo_valid " Directory needed already exists"
	fi
}

##		Copying file needed

copy_file(){
	
	local tidy_loop
	
	echo_display " Check needed files in ${NEWROOT}"
	if [[  ! -e "$NEWROOT/etc/resolv.conf" ]]; then 
		cp /etc/resolv.conf "$NEWROOT/etc/resolv.conf" || die " Impossible to copy the file resolv.conf" "clean_install"
	else
		echo_valid " File resolv.conf already exist"
	fi
	if [[ ! -d "$NEWROOT/$SOURCES_FUNC" ]]; then
		mkdir -p "$NEWROOT/$SOURCES_FUNC" || die " Impossible to create /tmp/obarun-install-tmp directory" "clean_install"
	fi
	
	for tidy_loop in /usr/lib/obarun/{install_functions,common_functions} /etc/obarun/install.conf $GENERAL_DIR/$CONFIG_DIR/customizeChroot; do
		echo_notvalid " Copying $tidy_loop"
		cp -f "$tidy_loop" "$NEWROOT/$SOURCES_FUNC/" || die " Impossible to copy the file $tidy_loop" "clean_install"
	done
	unset tidy_loop
}

# function to find which installer to use for a given package
# return 10 for pacman, 11 for AUR helper
# ${1} name of package
choose_installer(){
	
	local b named group
		
	named="${1}"
		
	for b in $(pacman -Ssq ${named[@]}); do
		if [[ $named =~ $b ]] ; then
			return 10			
		fi
	done
	unset b
	
	for b in $(cower -sq ${named[@]}); do
		if [[ $named =~ $b ]] ; then
			return 11			
		fi
	done
	unset b
	
	# be sure the named are not a group
	# if it's the case return value for pacman
	
	group=( $(pacman -Sgq ${named[@]}) )
	if (( "${#group}" )); then
		return 10
	fi
		
	unset named b group
}

install_package(){
	local item item_base tidy_loop rc
	local -a installed list list_base result result_base pacman_list aur_list
	
	if [[ ! -e $GENERAL_DIR/$CONFIG_DIR/package_list/base ]]; then
		die "The file named base at $GENERAL_DIR/$CONFIG_DIR/package_list/ must exist, please create one." "clean_install"
	fi
	
	# bash is the first package installed by pacman
	# if $NEWROOT/usr/bin/bash doesn't exist means that is the first pass 
	# into the function install_system; so install base package first
	if ! [[ -x "$NEWROOT/usr/bin/bash" ]]; then
		pacman -r "$NEWROOT" -S $(grep -h -v ^# $GENERAL_DIR/$CONFIG_DIR/package_list/base) --config "$GENERAL_DIR/$CONFIG_DIR/pacman.conf" --cachedir "$CACHE_DIR" --noconfirm || die " Failed to install base system" "clean_install"
	fi
	
	installed=($(pacman -r "$NEWROOT" -Qsq))
	
	# check first for base packages
	
	echo_display " Check base installed packages"
	
	list_base=" ${installed[@]} " #include blank
	while read item_base; do
		if ! [[ $list_base =~ " $item_base " ]] ; then
			result_base+=($item_base)			
		fi
	done < <(grep -h -v ^# $GENERAL_DIR/$CONFIG_DIR/package_list/base | sed "/^\s*$/d" | sort -du)
		
	if [[ -n "${result_base[@]}" ]]; then
		echo_notvalid " Install missing base packages"
		pacman -S ${result_base[@]} -r "$NEWROOT" --config "$GENERAL_DIR/$CONFIG_DIR/pacman.conf" --cachedir "$CACHE_DIR" --noconfirm 2>/dev/null || die " Failed to install packages" "clean_install"
		result_base=()
	else
		echo_valid " Nothing to do for base system"
	fi
	
	# check installed packages
	
	echo_display " Ckeck installed packages, this may take time..."
	
	list=" ${installed[@]} " #include blank  
	while read item; do
		if ! [[ $list =~ " $item " ]] ; then
			result+=("$item")			
		fi
	done < <(grep -h -v ^# $GENERAL_DIR/$CONFIG_DIR/package_list/* | sed "/^\s*$/d" | sort -du)

	#install missing package if necessary
	if [[ -n "${result[@]}" ]]; then
				
		for tidy_loop in ${result[@]} ; do
		
			choose_installer "${tidy_loop}"
			
			rc=$?
				
			case "$rc" in 
				10) 
					unset rc
					pacman_list+=("$tidy_loop")
					;;
				11)
					unset rc
					aur_list+=("$tidy_loop")
					;;
				*)
					unset rc
					die "$tidy_loop can not be installed by pacman or AUR helper" "clean_install"
					;;
			esac
		done
		
		if [[ -n ${pacman_list[@]} ]]; then
			echo_notvalid " Install missing packages coming from repo define in pacman.conf"
			pacman -r "$NEWROOT" -S ${pacman_list[@]} --config "$GENERAL_DIR/$CONFIG_DIR/pacman.conf" --cachedir "$CACHE_DIR" --noconfirm || die " Failed to install packages with pacman" "clean_install"
		fi
	
		if [[ -n ${aur_list[@]} ]]; then
			echo_notvalid " Install missing packages coming from AUR"
			unset tidy_loop
			for tidy_loop in ${aur_list[@]}; do
				aur_install "${tidy_loop}"
			done			
		fi
	else
		echo_valid " All packages are already installed, nothing to do."
	fi
	
	unset item item_base tidy_loop installed list list_base result result_base pacman_list aur_list
}

# ${1} name of the package
aur_deps(){
	
	local named tidy_loop rc
	local -a dps dps_parsed
	
	named="${1}"
	dps=$(cower -i $named --format=%D) # Depends
	dps+=($(cower -i $named --format=%M)) # Makedepends
	
	# parse each element of the array to remove any <>= characters
	for tidy_loop in ${dps[@]}; do
		#echo tidy_loop :: $tidy_loop
		tidy_loop=${tidy_loop%%@(>|<|=)*}
		#echo tidy_loop parsed :: $tidy_loop
		dps_parsed+=("$tidy_loop")
	done
	unset tidy_loop
	
	# loop through dependencies recursively
	for tidy_loop in ${dps_parsed[@]}; do
		
		choose_installer "${tidy_loop}"
		
		rc=$?
		
		if [[ "$rc" == 11 ]];then
			aur_deps "${tidy_loop}"
			aur_install "${tidy_loop}"
		fi
	done
	
	unset named rc dps dps_parsed
}

# ${1} name of the package
# ${2} working directory
aur_get_pkgbuild(){
	
	local named work_dir
	
	named="${1}"
	work_dir="${2}"
		
	cower -df "${named}" -t "${work_dir}" --ignorerepo

	unset named work_dir
}

# ${1} name of the package
# ${2} variable to change by pkgver-pkgrel value
aur_get_pkgver_pkgrel(){
	
	local named
	named="${1}"
	return_value="${2}"
	
	ver_rel=$(cower -s ${named} --format=%v)
	
	eval "$return_value=$ver_rel"
	
	unset named return_value
}

# ${1} name of the package
# ${2} working directory
aur_build(){
	
	local named work_dir _oldpwd
	_oldpwd=$(pwd)
	named="${1}"
	work_dir="${2}"
	
	cd "${work_dir}"
	
	su usertmp -c "makepkg -Cs --noconfirm --needed --nosign"
	
	cd "${_oldpwd}"
	
	unset named work_dir _oldpwd
}

# ${1} name of the package
aur_install(){

	local work_dir named _oldpwd pkg_ver_rel real_name
	local -a installed_yet
	
	_oldpwd=$(pwd)
	named="${1}"
	
	installed_yet=($(pacman -r ${NEWROOT} -Qsq ${named}))
	
	if [[ -z ${installed_yet[@]} ]]; then
		rc=1
	else
		check_elements "${named}" ${installed_yet[@]}
		rc=$?
	fi
	
	if (( "${rc}" )); then
		unset rc
		
		work_dir=$(mktemp -d /tmp/$named.XXXXXX)
	
		echo_display " Install $named from AUR"
	
		echo_display " Get pkgbuild for ${named}"	
		aur_get_pkgbuild "${named}" "${work_dir}"
		
		real_name=$(ls -A "${work_dir}")
		
		cd "${work_dir}/${real_name}"
		echo_display " Resolve dependencies for ${named}"
		aur_deps "${named}"

		echo_display " Build the package ${named}"
		chmod -R 0777 ${work_dir}
		aur_build "${named}" "${work_dir}/${real_name}"
	
		echo_display " Installing package ${named}"
	
		pacman -r "$NEWROOT" -U ${named}-*.pkg.tar.xz --config "$GENERAL_DIR/$CONFIG_DIR/pacman.conf" --cachedir "$CACHE_DIR" --noconfirm || die " Failed to install packages $named" "clean_install"
	
		cd "${_oldpwd}"
	fi
	
	unset work_dir named _oldpwd pkg_ver_rel installed_yet real_name
}

##		Sync database

sync_data(){
	
	echo_display " Synchronize database"
	pacman -Sy --config "$GENERAL_DIR/$CONFIG_DIR/pacman.conf" || die " Impossible to synchronize database" "clean_install"
	
	echo_display " Copying database on $NEWROOT/var/lib/pacman/sync/"	
	mkdir -p -m0755 "$NEWROOT/var/lib/pacman/sync/"
	cp /var/lib/pacman/sync/*.{db,sig} "$NEWROOT/var/lib/pacman/sync/" || die "/var/lib/pacman/sync/*.{db,sig} doesn't exit on host" "clean_install"
		
}

##		Copy directory rootfs in $NEWROOT

copy_rootfs(){
	
	echo_display " Copying configuration files in ${NEWROOT}"
	
	cp -af "$GENERAL_DIR/$CONFIG_DIR/rootfs/"* "$NEWROOT"/ || die " Impossible to copy files" "clean_install"
}

##		Customize NEWROOT

enter_chroot(){
	
	# make sure the necessary is present before enter on chroot
	check_mountpoint "$NEWROOT"
	if (( $? )); then
		echo_retry " This is not a valid mountpoint"
		echo_retry " You need to mount a device on $NEWROOT or choose another directory"
		(sleep 4) && echo_info " Returning to the main_menu" && (sleep 1) && main_menu
	fi
		
	create_dir
	mount_umount "$NEWROOT" "mount"
	user_add "usertmp" || die " Impossible to create user usertmp" "clean_install"
	copy_rootfs
	copy_file
	define_root
	
	echo_display " Chroot on ${NEWROOT}"	
	chroot "$NEWROOT" "$SOURCES_FUNC"/customizeChroot || die " Failed to enter on ${NEWROOT} or Failed to execute functions customizeChroot" "clean_install"
	
	cp -f "$NEWROOT"/"$SOURCES_FUNC"/install.conf /etc/obarun/install.conf
}

##		Enter in $NEWROOT with mc

mc_newroot(){
	
	check_mountpoint "$NEWROOT"
	if (( $? )); then
		echo_retry " This is not a valid mountpoint"
		echo_retry " You need to mount a device on $NEWROOT or choose another directory"
		(sleep 4) && echo_info " Returning to the main_menu" && (sleep 1) && main_menu
	fi
	
	
	create_dir
	mount_umount "$NEWROOT" "mount"
	SHELL=/bin/sh chroot "$NEWROOT" /usr/bin/mc
}

##		Open an interactive shell on NEWROOT

call_shell(){
	
	check_mountpoint "$NEWROOT"
	if (( $? )); then
		echo_retry " This is not a valid mountpoint"
		echo_retry " You need to mount a device on $NEWROOT or choose another directory"
		(sleep 4) && echo_info " Returning to the main_menu" && (sleep 1) && main_menu
	fi
		
	create_dir
	mount_umount "$NEWROOT" "mount"
	echo_info " Tape exit when you have finished"
	if [[ -e "$NEWROOT/usr/bin/zsh" ]]; then
		SHELL=/bin/sh chroot "$NEWROOT" /usr/bin/zsh 
	else
		SHELL=/bin/sh chroot "$NEWROOT"
	fi
}

##		Start the installation

install_system(){
	
	check_mountpoint "$NEWROOT"
	if (( $? )); then
		echo_retry " This is not a valid mountpoint"
		echo_retry " You need to mount a device on $NEWROOT or choose another directory"
		(sleep 4) && echo_info " Returning to the main_menu" && (sleep 1) && main_menu
	fi
		
	create_dir
	mount_umount "$NEWROOT" "mount"
	user_add "usertmp" || die " Impossible to create user usertmp" "clean_install"
	copy_file
	check_gpg "$GPG_DIR"
	sync_data
	install_package
	gen_fstab "$NEWROOT"
	copy_rootfs
	define_root
}

## 		Main menu

main_menu(){

local step=100 enter

while [[ "$step" !=  12 ]]; do
	# reload the source, this is allow to see the change made on the menu
	source /etc/obarun/install.conf
	clear
	echo_bold ""
	echo_bold ""
	echo_info_menu "***************************************************************************************"
	echo_info_menu "                            Main menu"
	echo_info_menu "***************************************************************************************"
	echo_bold ""
	echo_bold " Assumptions :"
	echo_bold "	- User has partitioned, formatted, and mounted partitions on a directory"
	echo_bold "	- Network is functional"
	echo_bold "	- A valid mirror appears in /etc/pacman.d/mirrorlist"
	echo_bold "	- Defaults for the options are specified in brackets"
	echo_bold ""
	echo_info_menu "***************************************************************************************"
	echo_info_menu "                            Configuration"
	echo_info_menu "***************************************************************************************"
	echo_bold ""
	echo_bold " 1  -  Select Editor ${green}[$EDITOR]"
	echo_bold " 2  -  Choose your Desktop environment ${green}[$CONFIG_DIR]"
	echo_bold " 3  -  Edit pacman.conf file used by the script"
	echo_bold " 4  -  Define cache directory for pacman ${green}[$CACHE_DIR]"
	echo_bold " 5  -  Edit the list of packages that will be installed (AUR including)"
	echo_bold " 6  -  Enter root directory for installation ${green}[$NEWROOT]"
	echo_bold ""
	echo_info_menu "***************************************************************************************"
	echo_info_menu "                            Installation"
	echo_info_menu "***************************************************************************************"
	echo_bold ""
	echo_bold " 7  -  Install the system or resume an aborted installation"
	echo_bold " 8  -  Customize the fresh installation"
	echo_bold ""
	echo_info_menu "***************************************************************************************"
	echo_info_menu "                            Expert mode"
	echo_info_menu "  Assumptions : the base system must be installed at least before using this mode"
	echo_info_menu "***************************************************************************************"
	echo_bold ""
	echo_bold " 9  -  Edit the script customizeChroot"
	echo_bold " 10 -  Launch a shell on ${green}[$NEWROOT]${reset}${bold} directory"
	echo_bold " 11 -  Browse ${green}[$NEWROOT]${reset}${bold} with Midnight Commander"
	echo_bold ""
	echo_bold ""
	echo_bold " ${red}12 -  Exit installation script"
	echo_bold ""
	echo_bold ""
	echo_display " Enter your choice :";read  step

		case "$step" in 
			1)	choose_editor;;
			2)	choose_config;; # Never comment this options
			3)	edit_pacman;;
			4)	choose_cache;;
			5)	select_list;;
			6)	choose_rootdir;; # Never comment this options
			7)	install_system;;
			8)	enter_chroot;;
			9)	edit_customize_chroot;;
			10) call_shell;;
			11)	mc_newroot;;
			12) echo_display " Exiting"
				clean_install;;
			*) echo_retry " Invalid number, Please retry: "
		esac
		echo_info " Press enter to return to the Main menu"
		read enter 
done
unset enter
}

#####################################		Functions for customizeChroot script

## 		CustomizeChroot menu

customizeChroot_menu(){

local step=100 enter

while [[ "$step" !=  11 ]]; do
	# reload the source, this is allow to see the change made on the menu
	source "${SOURCES_FUNC}"/install.conf
	clear
	echo_bold ""
	echo_bold ""
	echo_info_menu "**************************************************************"
	echo_info_menu "              CustomizeChroot menu"
	echo_info_menu "**************************************************************"
	echo_bold ""
	echo_bold " 1  -  Define hostname ${green}[$HOSTNAME]"
	echo_bold " 2  -  Define locale ${green}[$LOCALE]"
	echo_bold " 3  -  Define localtime ${green}[$ZONE/$SUBZONE]"
	echo_bold " 4  -  Define a new user ${green}[$NEWUSER]"
	echo_bold " 5  -  Define console keymap ${green}[$KEYMAP]"
	echo_bold " 6  -  Define desktop keymap ${green}[$XKEYMAP]"
	echo_bold ""
	echo_bold " 7  -  Continue the installation"
	echo_bold ""
	echo_info_menu "**************************************************************"
	echo_info_menu "                   Expert mode"
	echo_info_menu "**************************************************************"
	echo_bold ""
	echo_bold " 8  -  Edit s6.conf file"
	echo_bold " 9  -  Browse with Midnight Commander"
	echo_bold " 10 -  Delete custo_once files"
	echo_bold ""
	echo_bold ""
	echo_bold " ${red}11  -  Return to the main menu"
	echo_bold ""
	echo_bold ""
	echo_display " Enter your choice :";read  step

		case "$step" in 
			1)	define_hostname;;
			2)	define_locale;; 
			3)	call_localtime;;
			4)	define_user;;
			5)	define_keymap;;
			6)	define_xkeymap;;
			7)	echo_display " Continue installation"
				break;;
			8)	edit_s6_conf;;
			9)	mc /;;
			10)	clean_once_file "rm" "/root/tmp/obarun-install";;
			11)	exit;;
			*) echo_retry " Invalid number, please retry:"
		esac
		echo_info " Press enter to return to the customizeChroot menu"
		read enter 
done
unset enter
}

## 		Define hostname

define_hostname(){
	
	local _hostname
	echo_display " Enter your hostname"
	
	read _hostname
	
	echo_valid " hostname is now : $_hostname"
	
	sed -i "s,HOSTNAME=.*$,HOSTNAME=\"$_hostname\",g" "$SOURCES_FUNC"/install.conf
	
	unset _hostname
}

##		Define locale

define_locale(){
	
	local enter _locale
	
	echo_display " Define your locale by uncomment desired line, only one line is allowed"
	echo_info " Press enter to continue"
	
	read enter
	
	"$EDITOR" /etc/locale.gen
	
	_locale=$(grep -v "#" /etc/locale.gen | awk -F " " '{ print $1 }')
	
	echo_valid " your locale is now : $_locale"
	
	sed -i "s,LOCALE=.*$,LOCALE=\"$_locale\",g" "$SOURCES_FUNC"/install.conf
	
	unset enter _locale
}

##		Define localtime

define_localtime(){

	zone_list=$(ls -d --group-directories-first ${LOCALTIME}/* | awk -F "${LOCALTIME}/" '{ print $2 }' | uniq)
	zone_list+=" Exit"
	select _zone in ${zone_list[@]}; do
		case $_zone in 
			Exit)customizeChroot_menu
			break;;
			*)if check_elements "$_zone" ${zone_list[@]}; then
				if [[  -d "${LOCALTIME}/$_zone" ]]; then
					sub_zone_list=$(ls ${LOCALTIME}/$_zone/* | awk -F "${LOCALTIME}/$_zone/" '{ print $2 }') 
					sub_zone_list+=" Exit"
					select _subzone in ${sub_zone_list[@]}; do
						case $_subzone in
							Exit)define_localtime
								break;;
							*)if check_elements "$_subzone" ${sub_zone_list[@]}; then
								break
							else
								echo_retry " Invalid number, retry :"
							fi
						esac
					done
				fi
			break	
			else 
				echo_retry " Invalid number, retry :"
			fi
		esac
	done
}
call_localtime(){
	
	local _zone _subzone
	
	unset ZONE SUBZONE
	
	echo_display " Choose your country/department"
	
	define_localtime
	
	echo_valid " Your localtime is now : $_zone/$_subzone"
	
	sed -i "s,ZONE=.*$,ZONE=\"$_zone\",g" "$SOURCES_FUNC"/install.conf
	sed -i "s,SUBZONE=.*$,SUBZONE=\"$_subzone\",g" "$SOURCES_FUNC"/install.conf
	
	unset _zone _subzone
}

##		Define keymap

define_keymap(){
	
	local _keymap
	local -a key_list
		
	echo_display " Choose your console keymap"

	key_list=$(ls -R /usr/share/kbd/keymaps | grep "map.gz" | sed 's/\.map\.gz//g' | sort | less)
	key_list+=" Exit"
	select _keymap in ${key_list[@]}; do
		case "$_keymap" in
			Exit)unset _keymap
				break;;
			*)if check_elements "$_keymap" ${key_list[@]}; then
				echo_valid " Your keymap is now : $_keymap"
				break
			  else 
				echo_retry " Invalid number, retry :"
			  fi
		esac
	done

	sed -i "s,KEYMAP=.*$,KEYMAP=\"$_keymap\"," "$SOURCES_FUNC"/install.conf
	
	unset key_list _keymap
}

##		Define xkeymap

define_xkeymap(){
	
	local _xkeymap
	local -a key_list
	
	echo_display " Choose your Desktop environment keymap"
	
	key_list="af al am at az ba bd be bg br bt bw by ca cd ch cm cn cz de dk ee es et eu fi fo fr gb ge gh gn gr hr hu ie il in iq ir is it jp ke kg kh kr kz la lk lt lv ma md me mk ml mm mn mt mv ng nl no np pc ph pk pl pt ro rs ru se si sk sn sy tg th tj tm tr tw tz ua us uz vn za"
	key_list+=" Exit"
	select _xkeymap in ${key_list[@]}; do
		case "$_xkeymap" in
			Exit)unset _xkeymap
				break;;
			*)if check_elements "$_xkeymap" ${key_list[@]}; then
				echo_valid " Your Desktop keymap is now : $_xkeymap"
				break
			  else 
				echo_retry " Invalid number, retry :"
			  fi
		esac
	done
	
	sed -i "s,XKEYMAP=.*$,XKEYMAP=\"$_xkeymap\"," "$SOURCES_FUNC"/install.conf
	
	unset key_list _xkeymap
}

##		Define a new user

define_user(){
	
	local _newuser f
	local -a user_exist
	
	echo_display " Enter the name for the user"
	read _newuser
	
	user_exist=$(grep "$_newuser" /etc/passwd | awk -F":" '{print $1}')
	
	for f in ${user_exist[@]}; do
		if [[ $f == $_newuser ]]; then			
			echo_retry " $_newuser already exit, please enter another name :"
			define_user
		fi
	done
	
	if [[ ${#_newuser} -eq 0 ]] || [[ $_newuser =~ \ |\' ]] || [[ $_newuser =~ [^a-z0-9\ ] ]]; then
		echo_retry " Invalid user name. Please retry :"
		define_user
	fi
	
	echo_valid " Name of the new account user is now : $_newuser"
	
	sed -i "s,NEWUSER=.*$,NEWUSER=\"$_newuser\",g" "$SOURCES_FUNC"/install.conf
	
	unset _newuser user_exist f
}

##		Config $NEWROOT with variable picked by user

config_custofile(){
	
	config_hostname
	config_locale
	config_localetime
	config_user
	config_keymap
	config_xkeymap
}

config_hostname(){
	
	if [[ "$HOSTNAME" != "" ]]; then
		sed -i 's/ .*$//' /etc/hosts
	fi
	#if [[ -h /etc/s6.conf ]]; then
		sed -i "s/HOSTNAME=.*$/HOSTNAME=$HOSTNAME/g" /etc/s6/s6.conf
	#else
	#	sed -i "s/HOSTNAME=\".*$/HOSTNAME=\"$HOSTNAME\"/g" /etc/rc.conf
	#fi
	
	echo "$HOSTNAME" > /etc/hostname
	sed -i '/127.0.0.1/s/$/ '$HOSTNAME'/' /etc/hosts
	sed -i '/::1/s/$/ '$HOSTNAME'/' /etc/hosts
	
	echo_valid " hostname was configured successfully"
}

config_locale(){
	
	local _locale
	
	# make sure the variable LOCALE is not empty before launch locale-gen
	_locale="${LOCALE:-en_US.UTF-8}"
	sed -i "s:^#${_locale}:${_locale}:g" /etc/locale.gen
	
	locale-gen
	
	echo LANG="$LOCALE" > /etc/locale.conf
    echo LC_COLLATE=C >> /etc/locale.conf
	
	echo_valid " Locale was created successfully"
}

config_localetime(){
	
	if [[ -n "$SUBZONE" ]]; then
		ln -sf ${LOCALTIME}/$ZONE/$SUBZONE /etc/localtime
		#if [[ -h /etc/s6.conf ]]; then
			sed -i "s/TZ=.*$/TZ=$ZONE\/$SUBZONE/g" /etc/s6/s6.conf
		#else
		#	sed -i "s/TIMEZONE=\".*$/TIMEZONE=\"$ZONE\/$SUBZONE\"/g" /etc/rc.conf
		#fi		
	else
		ln -sf ${LOCALTIME}/$ZONE /etc/localtime
		#if [[ -h /etc/s6.conf ]]; then
			sed -i "s/TZ=.*$/TZ=$ZONE/g" /etc/s6/s6.conf
		#else
		#	sed -i "s/TIMEZONE=\".*$/TIMEZONE=\"$ZONE\"/g" /etc/rc.conf
		#fi
	fi
	
	echo_valid " Localetime was configured successfully"
}

pass_user(){
	
	passwd "$NEWUSER"
	while [[ $? -ne 0 ]]; do
		echo_retry " Password do not match, please retry"
		passwd "$NEWUSER"
	done
}

config_user(){
	
	useradd -m -g users -G "audio,floppy,log,network,rfkill,scanner,storage,optical,power,wheel,video" -s /usr/bin/zsh "$NEWUSER"
	echo_display " You need to define $NEWUSER password"
	pass_user
	
	echo_valid " User $NEWUSER was created successfully" 
}

config_keymap(){
	
	#if [[ -h /etc/s6.conf ]]; then
		sed -i "s,KEYMAP=.*$,KEYMAP=$KEYMAP,g" /etc/s6/s6.conf
	#else
	#	sed -i "s,KEYMAP=\".*$,KEYMAP=\"$KEYMAP\",g" /etc/rc.conf
	#fi
	
	echo_valid " Console keymap was configured successfully"
}

config_xkeymap(){
	
	if [[ -e "/home/$NEWUSER/.config/openbox/autostart" ]]; then
		echo_notvalid " Define keymap for X server in /home/$NEWUSER/.config/openbox/autostart"
		sed -i 's/#setxkbmap.*$/setxkbmap\ '$XKEYMAP'\ \&/g' /home/$NEWUSER/.config/openbox/autostart
		sed -i 's/setxkbmap.*$/setxkbmap\ '$XKEYMAP'\ \&/g' /home/$NEWUSER/.config/openbox/autostart
	fi
	
	if [[ -e "/root/.config/openbox/autostart" ]]; then
		echo_notvalid " Define keymap for X server in /root/.config/openbox/autostart"
		sed -i 's/#setxkbmap.*$/setxkbmap\ '$XKEYMAP'\ \&/g' /root/.config/openbox/autostart
		sed -i 's/setxkbmap.*$/setxkbmap\ '$XKEYMAP'\ \&/g' /root/.config/openbox/autostart
	fi
	
	echo_valid " Desktop xkeymap was configured successfully"
}

##		Edit rc.conf

edit_s6_conf(){
	
	#if [[ -h /etc/s6.conf ]]; then
		edit_file "s6.conf" "/etc/s6" "$EDITOR"
	#else
	#	edit_file "rc.conf" "/etc/" "$EDITOR"
	#fi
	
}

##		Define resolv.conf

define_resolv(){
	
	echo_display " Define resolv.conf"
	if [[ -e /etc/resolv.conf.pacorig ]]; then 
		mv /etc/resolv.conf.pacorig /etc/resolv.conf
	fi
}


##		Remove once_file

clean_once_file(){
	
	local action dir f_ file
	local -a file_list
	
	action="${1}"
	dir="${2}"
	
	if [[ -d "${SOURCES_FUNC}" ]]; then
		file_list=$(ls $dir/ | uniq) 
		file_list+=" Remove_all_files"
		file_list+=" Exit"
		select file in ${file_list[@]}; do
			case $file in 
				Exit)break;;
				Remove_all_files) 	for f_ in ${file_list[@]}; do
										if [[ ! "$f_" = @(Exit|Remove_all_files) ]]; then
											eval "$action" "$dir/$f_"
										fi
									done;;
				*)if check_elements "$file" ${file_list[@]}; then
						eval "$action" "${dir}/${file}"
						clean_once_file "$action" "$dir"				
				else 
					echo_retry " Invalid number, retry :"
					clean_once_file "$action" "$dir"
				fi
			esac
			break
		done
	else
		echo_info " Directory /root/tmp/obarun-install does not exist"
	fi

	unset action dir f_ file file_list
}
	
##		Define/configure Bootloader

# TODO : let the choice at user to choose between bootloader
#define_bootloader(){
	
#}

syslinux_install(){
	
	local opts="$1"
	
	echo_display " Installing bootloader: syslinux"
	syslinux-install_update $opts
	
	echo_display " Maybe the partition name in the root parameter needs to be replaced."
	echo_display " Be sure to point the root partition in the line APPEND."
	syslinux_edit
	
	echo_valid " Syslinux install terminate"
}

syslinux_edit(){
	
	echo_display " Do you want edit syslinux.cfg [y|n]"
	
	reply_answer
	if (( ! $? )); then
		check_editor
		"$EDITOR" "/boot/syslinux/syslinux.cfg"
	fi
}

syslinux_menu(){

	local step=100 options=""

	while [[ "$step" != 5 ]]; do
		clear
	
		echo_bold ""
		echo_bold ""
		echo_info_menu "**************************************************************"
		echo_info_menu "              Syslinux configuration menu"
		echo_info_menu "**************************************************************"
		echo_bold ""
		echo_bold " 1 - Install files, set boot flag, install MBR ${green}[-iam]"
		echo_bold " 2 - Install files, set boot flag ${green}[-ia]"
		echo_bold " 3 - Install only MBR ${green}[-m]"
		echo_bold " 4 - Only set boot flag ${green}[-a]"
		echo_bold ""
		echo_bold " ${red}5 - Exit"
		echo_bold ""
		echo_bold ""
		echo_display " Enter your choice :";read step

			case "$step" in
				1)	options="-iam"
					break;;
				2) 	options="ia"
					break;;
				3) 	options="-m"
					break;;
				4) 	options="-a"
					break;;
				5) 	echo_info " Exiting"
					exit;;
				*) 	echo_retry " Invalid number, please retry:"
					echo_display " Press enter to return to syslinux configuration menu"
					read enter;;
			esac	
	done
	
	syslinux_install "$options"
}


