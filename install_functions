#!/bin/bash
## This script is under license BEER-WARE.
# "THE BEER-WARE LICENSE" (Revision 42):
# <eric@obarun.org> wrote this file.  As long as you retain this notice you
# can do whatever you want with this stuff. If we meet some day, and you think
# this stuff is worth it, you can buy me a beer in return.   Eric Vidal

# functions file for obarun-install package

shopt -s extglob

source /usr/lib/obarun/common_functions
source /etc/obarun/install.conf

## 		Some global variables needed

home_path="/var/lib/obarun/obarun-install"
dir="$home_path"
gen_dir="$dir/config"
yaourt_cache="$newroot/var/cache/pacman/pkg" 
tmp_yaourt="$newroot/tmp/"
src_functions="/tmp/obarun-install-tmp"

pack=0
rc=""

## 		Clean on exit

clean_install(){
	
	echo_display " Cleaning up"
	# make sure that all process are killed
	# before umounting 
	pkill haveged
	pkill gpg-agent
	pkill dirmngr
	
	if [[ $(mount | grep "$newroot"/proc) ]]; then
		mount_umount "$newroot" "umount"
	fi
	if [[ $(awk -F':' '{ print $1}' /etc/passwd | grep usertmp) >/dev/null ]]; then
		echo_valid " Removing user usertmp"
		user_del "usertmp" &>/dev/null
	fi
	if [[ -e /etc/yaourtrc.ori.obarun ]]; then
		mv /etc/yaourtrc.ori.obarun /etc/yaourtrc
	fi
	
	# keep the configuration variable from install.conf
	if [[ -f "$newroot"/"$src_functions"/install.conf ]]; then
		cp -f "$newroot"/"$src_functions"/install.conf /etc/obarun/install.conf
	fi
	
	if [[ -d "$newroot"/"$src_functions" ]]; then
		rm -r "$newroot"/"$src_functions"
	fi
	
	exit
}

## 		Create needed directory

create_dir(){
	echo_display " Check for needed directory"
	if ! [ -d "$newroot/proc" ]; then 
		echo_notvalid " Create needed directory in ${newroot}"
		mkdir -m 0755 -p "$newroot"/var/{cache/pacman/pkg,lib/pacman,log} "$newroot"/{dev,run,etc}
		mkdir -m 0755 -p "$newroot"/dev/{pts,shm}
		mkdir -m 1777 -p "$newroot"/tmp
		mkdir -m 0555 -p "$newroot"/{sys,proc}
	else
		echo_valid " Directory needed already exists"
	fi
}


## 		Select, check editor

choose_editor(){
	local old_editor
	old_editor="$editor"
	editors_list=("nano" "vi" "mcedit" "Exit");
	echo_display " Select your editor :"
	select editor in "${editors_list[@]}"; do
		case "$editor" in
			Exit)editor="$old_editor"
				break;;
			*)if check_elements "$editor" "${editors_list[@]}"; then
					echo_valid " Your editor is now : $editor"
					sed -i "s,editor=.*$,editor=\"$editor\",g" /etc/obarun/install.conf
					break
			  else 
					echo_retry " Invalid number, retry :"
			  fi
		esac
	done
}

check_editor(){
	if [[ "$editor" == "" ]]; then
		editor="mcedit"
	fi
}

## 		Select config directory

choose_config(){
	dir_list=$(ls -U $dir/config/)
	echo_display " Select the configuration directory that you want to use :"
	select directory in $dir_list; do
		if check_elements "$directory" $dir_list; then
			config_dir="$directory"	 
		break
		else 
			echo_retry " Invalid number, retry :"
		fi
	done
	echo_valid " You chose $config_dir"
	sed -i "s,config_dir=.*$,config_dir=\"$config_dir\",g" /etc/obarun/install.conf
}

##		Choose cache directory for pacman

choose_cache(){
	echo_display " Enter the path for your own cache directory"
	read -e cache_dir
	while [[ ! -d "$cache_dir" ]]; do
		echo_retry " $cache_dir is not a directory, please retry:"
		read -e cache_dir
	done
	# the directory must be not empty, may be bug here
	#while [[ $(ls $cache_dir | grep "pkg.tar.xz") = "" ]]; do
	#	echo_retry " Is not a valid directory for pacman, please retry:"
	#	read -e cache_dir
	#done
	echo_valid " Your cache directory is now : $cache_dir"
	sed -i "s,cache_dir=.*$,cache_dir=\"$cache_dir\",g" /etc/obarun/install.conf
}

## 		Edit pacman.conf

edit_pacman(){
	check_editor
	edit_file "pacman.conf" "$gen_dir/$config_dir" "$editor"	
}

## 		Edit customizeChroot file

edit_customize_chroot(){
	check_editor
	edit_file "customizeChroot" "$gen_dir/$config_dir" "$editor" || die " File customizeChroot not exist, you need to choose number 7 first" "clean_install"
	if [[ -d "$newroot/etc" ]]; then
		echo_display " Copying customizeChroot to $newroot/etc/customizeChroot"
		cp -f "$gen_dir/$config_dir/customizeChroot" "$newroot/etc/customizeChroot" 
	fi
}
	
## 		Select root directory

choose_rootdir(){	
	local _directory
		
	echo_display " Enter your root directory :"
	read -e _directory
		
	until [[ -d "$_directory" ]]; do
		echo_retry " This is not a directory, please retry :"
		read -e _directory
	done
	
	while ! mountpoint -q "$_directory"; do
		echo_retry " This is not a valide mountpoint, please retry :"
		read -e _directory
	done

	echo_valid " Your root directory for installation is now : $_directory"
	newroot="${_directory}"
	sed -i "s,newroot=.*$,newroot=\"$newroot\",g" /etc/obarun/install.conf
	
	unset _directory
}

## Check if needed packages is installed

check_pac_needed(){
	echo_display " Check packages needed for the script"
	if [[ ! $(pacman -Qs arch-install-scripts) >/dev/null ]]; then
		echo_notvalid " Installing arch-install-scripts"
		pacman -S arch-install-scripts --config "$gen_dir/$config_dir/pacman.conf" || die " Impossible to install the package arch-install-scripts" "clean_install"
	else
		echo_valid " arch-install-scripts : already installed"
	fi
	if [[ ! $(pacman -Qs yaourt) >/dev/null ]]; then
		echo_notvalid " Installing yaourt"
		pacman -S base-devel package-query yaourt --config "$gen_dir/$config_dir/pacman.conf" || die " Impossible to install the package arch-install-scripts" "clean_install"
	else
		echo_valid " yaourt : already installed"
	fi
}

##		Select packages list

select_list(){
	local list
	check_editor
	pac_list=$(ls "$gen_dir"/"$config_dir"/package_list/)
	pac_list+=" Exit"
	echo_display " File named repo_* concerns the packages provides by repositories defined in pacman.conf"
	echo_display " File named aur_* concerns the packages from AUR"
	echo_display " Select the list you want to edit then select Exit number to return at main menu :"
	select list in $pac_list; do
		case "$list" in
			Exit)break;;
			*)if check_elements "$list" $pac_list; then
				"$editor" "$gen_dir/$config_dir/package_list/$list"
			  else 
				echo_retry " Invalid number, retry :"
			  fi
		esac
	done
}

##		Copying file needed

copy_file(){
	echo_display " Check needed files in ${newroot}"
	if [[  ! -e "$newroot/etc/resolv.conf" ]]; then 
		cp /etc/resolv.conf "$newroot/etc/resolv.conf" || die " Impossible to copy the file resolv.conf" "clean_install"
	else
		echo_valid " File resolv.conf already exist"
	fi
	if [[ ! -d "$newroot/$src_functions" ]]; then
		mkdir -p "$newroot/$src_functions" || die " Impossible to create /tmp/obarun-install-tmp directory" "clean_install"
	fi
	
	echo_notvalid " Copying install_functions"	
	cp -f "/usr/lib/obarun/install_functions" "$newroot/$src_functions/install_functions" || die "Impossible to copy file install_functions" "clean_install"
	
	echo_notvalid " Copying common_functions"
	cp -f "/usr/lib/obarun/common_functions" "$newroot/$src_functions/common_functions" || die "Impossible to copy file common_functions" "clean_install"
	
	echo_notvalid " Copying install.conf"
	cp -f "/etc/obarun/install.conf" "$newroot/$src_functions/install.conf" || die " Impossible to copy file install.conf" "clean_install"
	
	echo_notvalid " Copying customizeChroot"
	cp -f "$gen_dir/$config_dir/customizeChroot" "$newroot/$src_functions/customizeChroot" || die " Impossible to copy file customizeChroot" "clean_install"
	
}

##		Install packages if pack = 0 otherwise call resume_install function

install_pack(){
	
	if [[ "$pack" == 0 ]]; then
		echo_display " Install packages from lists"
		pac_install || die " Impossible to install packages from repository" "clean_install"
		aur_install || die " Impossible to install packages from AUR" "clean_install"
	else
		resume_install
		aur_install
	fi
			
}

##		Only install packages are not present yet

resume_install(){
	local item item_base
	local -a installed not_installed base_installed list list_base result result_base
	
	# TODO : bug -> nÂ°7 need to be launch one time else /var/lib/pacman doesn't exist
	mapfile -t installed < <(pacman -r "$newroot" -Qsq)
	mapfile -t not_installed < <(grep -h -v ^# $gen_dir/$config_dir/package_list/repo_*)
	mapfile -t base_installed < <(grep -h -v ^# $gen_dir/$config_dir/package_list/base)
	
	# check first for base packages
	echo_display " Check base installed packages for pacman"
	list_base=" ${installed[@]} "
		for item_base in ${base_installed[@]}; do
			if ! [[ $list_base =~ " $item_base " ]] ; then
				result_base+=($item_base)
			fi
		done
	#install base package	
	if [[ -n "${result_base[@]}" ]]; then
		echo_notvalid " Install missing base packages"
		pacman -r "$newroot" -S "${result_base[@]}" --config "$gen_dir/$config_dir/pacman.conf" --cachedir "$cache_dir" --noconfirm 2>/dev/null || die " Failed to install packages" "clean_install"
		result_base=()
	else
		echo_valid " Nothing to do for base system"
	fi	
		
	echo_display " Ckeck installed packages for pacman"
	list=" ${installed[@]} "                #include blank    
		for item in ${not_installed[@]}; do
			if ! [[ $list =~ " $item " ]] ; then  
				result+=($item)
			fi
		done
	
	#install package
	if [[ -n "${result[@]}" ]]; then
		echo_notvalid " Install missing packages"
		pacman -r "$newroot" -S "${result[@]}" --config "$gen_dir/$config_dir/pacman.conf" --cachedir "$cache_dir" --noconfirm 2>/dev/null || die " Failed to install packages" "clean_install"
		result=()
	else
		echo_valid " Nothing to do for pacman"
	fi
}

## 		Install packages with pacman

pac_install(){
		echo_display " Install base first"
		pacman -r "$newroot" -S $(grep -h -v ^# $gen_dir/$config_dir/package_list/base) --config "$gen_dir/$config_dir/pacman.conf" --cachedir "$cache_dir" --noconfirm || die " Failed to install packages" "clean_install"
		pacman -r "$newroot" -S $(grep -h -v ^# $gen_dir/$config_dir/package_list/repo_*) --config "$gen_dir/$config_dir/pacman.conf" --cachedir "$cache_dir" --noconfirm || die " Failed to install packages" "clean_install"
}

## 		Install package from aur

aur_install(){
	chmod -R 0777 "$yaourt_cache" ## this turn around is little ugly but necessary to allow written by user "usertmp"
	if [[ ! -d "$newroot/var/lib/pacman/sync" ]]; then 
		sync="y"
	else
		sync=""
	fi
		
	if [[ ! -e /etc/yaourtrc.ori.obarun ]]; then
		if [[ -e /etc/yaourtrc ]]; then
			cp /etc/yaourtrc /etc/yaourtrc.ori.obarun
		fi
		sed -i "s:#TMPDIR=.*$:TMPDIR=$tmp_yaourt:" /etc/yaourtrc
		sed -i "s:#EXPORT=.*$:EXPORT=1:" /etc/yaourtrc
		sed -i "s:#EXPORTDIR=.*$:EXPORTDIR=$yaourt_cache:" /etc/yaourtrc
	fi	
	aur_cache
	chmod -R 0755 "$yaourt_cache"
}

aur_cache(){
	local list item hit wanted name p_hit passed
	local -a installed notinstalled y_cached p_cached result
	
	mapfile -t installed < <(pacman -r "$newroot" -Qsq)
	mapfile -t notinstalled < <(cat $gen_dir/$config_dir/package_list/aur_* | grep -v "#" | sed  '/^ *$/d')
	mapfile -t y_cached < <(ls -1 -p $yaourt_cache/ | grep -v '/$' | grep -v "gz" | sed 's/-[0-9].*$//g')
	mapfile -t p_cached < <(ls $cache_dir | sed 's/-[0-9].*$//g' | uniq)
	
	echo_display " Ckeck installed packages for yaourt"
	# diff between wanted and installed	
	list=" ${installed[@]} "                  
	for item in "${notinstalled[@]}"; do
		if ! [[ $list =~ " $item " ]] ; then  
			result+=($item,)
		fi
	done
	
	# TODO : FAIL try to install a package group instead of package name
	# install from cache if present else download it
	if [[ -n "${result[@]}" ]]; then
		while read -d "," wanted; do
			if [[ -n "${y_cached[@]}" ]]; then
				for name in "${y_cached[@]}"; do
					if [ $name = $wanted ]; then
						hit=0
					fi
				done
				for name in "${p_cached[@]}";do
					if [ $name = $wanted ]; then
						p_hit=0
					fi
				done
				if [[ $p_hit = 0 ]]; then
						# check for last version
						# TODO : can cause problem if the cache directory is out of date, need to be improved
						pack=$(ls -1t $cache_dir | grep $wanted | head -1) 
						pacman -r "$newroot" -U"$sync" "$cache_dir"/$pack --noconfirm || die " Failed to install packages" "clean_install"
						p_hit=""
						hit=""
						passed=0
				fi
				if [[ $hit = 0 ]]; then
					pacman -r "$newroot" -U"$sync" "$yaourt_cache"/$wanted*.xz --noconfirm || die " Failed to install packages" "clean_install"
					hit=""
				else
					if [[ $passed != 0 ]]; then
						sudo -u usertmp yaourt -r "$newroot" -S"$sync" "$wanted" --noconfirm || die " Failed to install packages" "clean_install"
						hit=""
						passed=""
					fi
				fi
			else
				sudo -u usertmp yaourt -r "$newroot" -S"$sync" "$wanted" --noconfirm || die " Failed to install packages" "clean_install"
			fi
		done <<< ${result[@]}
	else
		echo_valid " Nothing to do for yaourt"
	fi
}

##		Sync database

sync_data(){
	
	echo_display " Synchronize database"
	pacman -Sy --config "$gen_dir/$config_dir/pacman.conf" || die " Impossible to synchronize database" "clean_install"
	
	echo_display " Copying database on $newroot/var/lib/pacman/sync/"	
	mkdir -p -m0755 "$newroot/var/lib/pacman/sync/"
	cp /var/lib/pacman/sync/*.db "$newroot/var/lib/pacman/sync/" || die "/var/lib/pacman/sync/*.db doesn't exit on host" "clean_install"
		
}

##		Copy directory rootfs in $newroot

copy_rootfs(){
	echo_display " Copying configuration files in ${newroot}"
	cp -af "$dir"/config/"$config_dir"/rootfs/* "$newroot"/ || die " Impossible to copy files" "clean_install"
}

##		Customize newroot

enter_chroot(){
	# make sure the necessary is present before enter on chroot
	check_mountpoint "$newroot"
	if (( "$rc" )); then
		unset rc
		echo_retry " This is not a valid mountpoint"
		echo_retry " You need to mount a device on $newroot or choose another directory"
		(sleep 4) && echo_info " Returning to the main_menu" && (sleep 1) && main_menu
	fi
	unset rc
	
	create_dir
	mount_umount "$newroot" "mount"
	user_add "usertmp" || die " Impossible to create user usertmp" "clean_install"
	copy_rootfs
	copy_file
	define_root
	
	echo_display " Enter on chroot of ${newroot}"	
	chroot "$newroot" "$src_functions"/customizeChroot || die " Failed to enter on ${newroot} or Failed to execute functions customizeChroot" "clean_install"
	
	cp -f "$newroot"/"$src_functions"/install.conf /etc/obarun/install.conf
}

##		Enter in $newroot with mc

mc_newroot(){
	check_mountpoint "$newroot"
	if (( "$rc" )); then
		unset rc
		echo_retry " This is not a valid mountpoint"
		echo_retry " You need to mount a device on $newroot or choose another directory"
		(sleep 4) && echo_info " Returning to the main_menu" && (sleep 1) && main_menu
	fi
	unset rc
	
	create_dir
	mount_umount "$newroot" "mount"
	SHELL=/bin/sh chroot "$newroot" /usr/bin/mc
}

##		Open an interactive shell on newroot

call_shell(){
	check_mountpoint "$newroot"
	if (( "$rc" )); then
		unset rc
		echo_retry " This is not a valid mountpoint"
		echo_retry " You need to mount a device on $newroot or choose another directory"
		(sleep 4) && echo_info " Returning to the main_menu" && (sleep 1) && main_menu
	fi
	unset rc
	
	create_dir
	mount_umount "$newroot" "mount"
	echo_info " Tape exit when you have finished"
	if [[ -e "$newroot/usr/bin/zsh" ]]; then
		SHELL=/bin/sh chroot "$newroot" /usr/bin/zsh 
	else
		SHELL=/bin/sh chroot "$newroot"
	fi
}

##		Define root user

define_root(){
	if [[ ! $(cat $newroot/etc/shadow | grep "root::") == "" ]]; then
		echo_display " Change shell for root user on $newroot"
		usermod -R "$newroot" -s /usr/bin/zsh root
		
		echo_display " Copy skeleton to $newroot/root/"
		cp -rT "$newroot/etc/skel/" "$newroot/root/"
		
		chmod 0750 "$newroot/root"
		
		echo_display " You need to define root password"
		pass_root
		echo_valid " root user was modified successfully"
	fi
	if [[ -e "$newroot/root/.zlogin" ]]; then
		echo_display " Removing auto-login for root"
		rm "$newroot/root/.zlogin"
	fi
}

pass_root(){
	passwd -R "$newroot" root
	while [[ $? -ne 0 ]]; do
		echo_retry " Password do not match, please retry"
		passwd -R "$newroot" root
	done
}


##		Start the installation

install_system(){
	check_mountpoint "$newroot"
	if (( "$rc" )); then
		unset rc
		echo_retry " This is not a valid mountpoint"
		echo_retry " You need to mount a device on $newroot or choose another directory"
		(sleep 4) && echo_info " Returning to the main_menu" && (sleep 1) && main_menu
	fi
	unset rc
	
	create_dir
	mount_umount "$newroot" "mount"
	user_add "usertmp" || die " Impossible to create user usertmp" "clean_install"
	copy_file
	check_gpg "$gpg_dir"
	sync_data
	check_pac_needed
	install_pack
	gen_fstab "$newroot"
	copy_rootfs
	define_root
	pack=0
}

## 		Main menu

main_menu(){

local step=100

while [[ "$step" !=  13 ]]; do
	clear
	echo_bold ""
	echo_bold ""
	echo_info_menu "***************************************************************************************"
	echo_info_menu "                            Main menu"
	echo_info_menu "***************************************************************************************"
	echo_bold ""
	echo_bold " Assumptions :"
	echo_bold "	- User has partitioned, formatted, and mounted partitions on a directory"
	echo_bold "	- Network is functional"
	echo_bold "	- A valid mirror appears in /etc/pacman.d/mirrorlist"
	echo_bold "	- Defaults for the options are specified in brackets"
	echo_bold ""
	echo_info_menu "***************************************************************************************"
	echo_info_menu "                            Configuration"
	echo_info_menu "***************************************************************************************"
	echo_bold ""
	echo_bold " 1  -  Select Editor ${green}[$editor]"
	echo_bold " 2  -  Choose your Desktop environment ${green}[$config_dir]"
	echo_bold " 3  -  Edit pacman.conf file used by the script"
	echo_bold " 4  -  Define cache directory for pacman ${green}[$cache_dir]"
	echo_bold " 5  -  Edit the list of packages that will be installed (AUR including)"
	echo_bold " 6  -  Enter root directory for installation ${green}[$newroot]"
	echo_bold ""
	echo_info_menu "***************************************************************************************"
	echo_info_menu "                            Installation"
	echo_info_menu "***************************************************************************************"
	echo_bold ""
	echo_bold " 7  -  Install the base system"
	echo_bold " 8  -  Launch the script customizeChroot"
	echo_bold ""
	echo_bold " 9  -  Resume an aborted installation"	 	
	echo_bold ""
	echo_info_menu "***************************************************************************************"
	echo_info_menu "                            Expert mode"
	echo_info_menu "  Assumptions : the base system must be installed at least before using this mode"
	echo_info_menu "***************************************************************************************"
	echo_bold ""
	echo_bold " 10 -  Edit the script customizeChroot"
	echo_bold " 11 -  Launch a shell on ${green}[$newroot]${reset}${bold} directory"
	echo_bold " 12 -  Browse ${green}[$newroot]${reset}${bold} with Midnight Commander"
	echo_bold ""
	echo_bold ""
	echo_bold " ${red}13 -  Exit installation script"
	echo_bold ""
	echo_bold ""
	echo_display " Enter your choice :";read  step

		case "$step" in 
			1)	choose_editor;;
			2)	choose_config;; # Never comment this options
			3)	edit_pacman;;
			4)	choose_cache;;
			5)	select_list;;
			6)	choose_rootdir;; # Never comment this options
			7)	install_system;;
			8)	enter_chroot;;
			9)	pack=1
				install_system;;
			10)	edit_customize_chroot;;
			11) call_shell;;
			12)	mc_newroot;;
			13) echo_display " Exiting"
				clean_install;;
			*) echo_retry " Invalid number, Please retry: "
		esac
		echo_info " Press enter to return to the Main menu"
		read enter 
done
}

#####################################		Functions for customizeChroot script

## 		CustomizeChroot menu

customizeChroot_menu(){

local step=100

while [[ "$step" !=  11 ]]; do
	clear
	echo_bold ""
	echo_bold ""
	echo_info_menu "**************************************************************"
	echo_info_menu "              CustomizeChroot menu"
	echo_info_menu "**************************************************************"
	echo_bold ""
	echo_bold " 1  -  Define hostname ${green}[$hostname]"
	echo_bold " 2  -  Define locale ${green}[$locale]"
	echo_bold " 3  -  Define localtime ${green}[$zone/$subzone]"
	echo_bold " 4  -  Define a new user ${green}[$newuser]"
	echo_bold " 5  -  Define console keymap ${green}[$keymap]"
	echo_bold " 6  -  Define desktop keymap ${green}[$xkeymap]"
	echo_bold ""
	echo_bold " 7  -  Continue the installation"
	echo_bold ""
	echo_info_menu "**************************************************************"
	echo_info_menu "                   Expert mode"
	echo_info_menu "**************************************************************"
	echo_bold ""
	echo_bold " 8  -  Edit the booting configuration file"
	echo_bold " 9  -  Browse with Midnight Commander"
	echo_bold " 10 -  Delete custo_once files"
	echo_bold ""
	echo_bold ""
	echo_bold " ${red}11  -  Return to the main menu"
	echo_bold ""
	echo_bold ""
	echo_display " Enter your choice :";read  step

		case "$step" in 
			1)	define_hostname;;
			2)	define_locale;; 
			3)	call_localtime;;
			4)	define_user;;
			5)	define_keymap;;
			6)	define_xkeymap;;
			7)	echo_display " Continue installation"
				break;;
			8)	edit_rc_conf;;
			9)	mc_enter;;
			10)	clean_once_file rm "/root/tmp/obarun-install";;
			11)	exit;;
			*) echo_retry " Invalid number, please retry:"
		esac
		echo_info " Press enter to return to the customizeChroot menu"
		read enter 
done
}

## 		Define hostname

define_hostname(){
	echo_display " Enter your hostname"
	read hostname
	echo_valid " hostname is now : $hostname"
	
	sed -i "s,hostname=.*$,hostname=\"$hostname\",g" "$src_functions"/install.conf
}

##		Define locale

define_locale(){
	local enter
	echo_display " Define your locale by uncomment desired line, only one line is allowed"
	echo_info " Press enter to continue"
	read enter
	
	"$editor" /etc/locale.gen
	
	locale=$(grep -v "#" /etc/locale.gen | awk -F " " '{ print $1 }')
	
	echo_valid " your locale is now : $locale"
	
	sed -i "s,locale=.*$,locale=\"$locale\",g" "$src_functions"/install.conf
}

##		Define localtime

define_localtime(){
	zone_list=$(ls -d --group-directories-first /usr/share/zoneinfo/* | awk -F "/usr/share/zoneinfo/" '{ print $2 }' | uniq)
	zone_list+=" Exit"
	select zone in $zone_list; do
		case $zone in 
			Exit)customizeChroot_menu
			break;;
			*)if check_elements "$zone" $zone_list; then
				if [[  -d "/usr/share/zoneinfo/$zone" ]]; then
					sub_zone_list=$(ls /usr/share/zoneinfo/$zone/* | awk -F "/usr/share/zoneinfo/$zone/" '{ print $2 }') 
					sub_zone_list+=" Exit"
					select subzone in $sub_zone_list; do
						case $subzone in
							Exit)define_localtime
								break;;
							*)if check_elements "$subzone" $sub_zone_list; then
								break
							else
								echo_retry " Invalid number, retry :"
							fi
						esac
					done
				fi
			break	
			else 
				echo_retry " Invalid number, retry :"
			fi
		esac
	done
}

call_localtime(){
	
	unset zone subzone
	echo_display " Choose your country/department"
	define_localtime
	
	echo_valid " Your localtime is now : $zone/$subzone"
	
	sed -i "s,zone=.*$,zone=\"$zone\",g" "$src_functions"/install.conf
	sed -i "s,subzone=.*$,subzone=\"$subzone\",g" "$src_functions"/install.conf
}

##		Define keymap

define_keymap(){
	echo_display " Choose your console keymap"
	local -a key_list
	key_list=$(ls -R /usr/share/kbd/keymaps | grep "map.gz" | sed 's/\.map\.gz//g' | sort | less)
	key_list+=" Exit"
	select keymap in $key_list; do
		case "$keymap" in
			Exit)unset keymap
				break;;
			*)if check_elements "$keymap" $key_list; then
				echo_valid " Your keymap is now : $keymap"
				break
			  else 
				echo_retry " Invalid number, retry :"
			  fi
		esac
	done
	unset key_list	
	
	sed -i "s,^keymap=.*$,keymap=\"$keymap\"," "$src_functions"/install.conf
}

##		Define xkeymap

define_xkeymap(){
	echo_display " Choose your Desktop environment keymap"
	local -a key_list
	key_list="af al am at az ba bd be bg br bt bw by ca cd ch cm cn cz de dk ee es et eu fi fo fr gb ge gh gn gr hr hu ie il in iq ir is it jp ke kg kh kr kz la lk lt lv ma md me mk ml mm mn mt mv ng nl no np pc ph pk pl pt ro rs ru se si sk sn sy tg th tj tm tr tw tz ua us uz vn za"
	key_list+=" Exit"
	select xkeymap in $key_list; do
		case "$xkeymap" in
			Exit)unset xkeymap
				break;;
			*)if check_elements "$xkeymap" $key_list; then
				echo_valid " Your Desktop keymap is now : $xkeymap"
				break
			  else 
				echo_retry " Invalid number, retry :"
			  fi
		esac
	done
	unset key_list
		
	sed -i "s,^xkeymap=.*$,xkeymap=\"$xkeymap\"," "$src_functions"/install.conf
}

##		Define a new user

define_user(){
	echo_display " Enter the name for the user"
	read newuser
	while [[ ! $(cat /etc/passwd | grep "$newuser") == "" ]]; do
		echo_retry " $newuser already exit, please enter another name :"
		read newuser
	done
	while [[ ${#newuser} -eq 0 ]] || [[ $newuser =~ \ |\' ]] || [[ $newuser =~ [^a-z0-9\ ] ]]; do
		echo_retry " Invalid user name. Please retry :"
		read newuser
	done
	
	echo_valid " Name of the new account user is now : $newuser"
	
	sed -i "s,newuser=.*$,newuser=\"$newuser\",g" "$src_functions"/install.conf
}

##		Config $newroot with variable picked by user

config_custofile(){
	config_hostname
	config_locale
	config_localetime
	config_user
	config_keymap
	config_xkeymap
}

config_hostname(){
	if [[ "$hostname" != "" ]]; then
		sed -i 's/ .*$//' /etc/hosts
	fi
	if [[ -h /etc/s6.conf ]]; then
		sed -i "s/HOSTNAME=.*$/HOSTNAME=$hostname/g" /etc/s6/s6.conf
	else
		sed -i "s/HOSTNAME=\".*$/HOSTNAME=\"$hostname\"/g" /etc/rc.conf
	fi
	echo "$hostname" > /etc/hostname
	sed -i '/127.0.0.1/s/$/ '$hostname'/' /etc/hosts
	sed -i '/::1/s/$/ '$hostname'/' /etc/hosts
	
	echo_valid " hostname was configured successfully"
}
config_locale(){
	
	locale-gen
	echo LANG="$locale" > /etc/locale.conf
    echo LC_COLLATE=C >> /etc/locale.conf
	
	echo_valid " Locale was created successfully"
}

config_localetime(){
	if [[ "$subzone" != "" ]]; then
		ln -sf /usr/share/zoneinfo/$zone/$subzone /etc/localtime
		if [[ -h /etc/s6.conf ]]; then
			sed -i "s/TZ=.*$/TZ=$zone\/$subzone/g" /etc/s6/s6.conf
		else
			sed -i "s/TIMEZONE=\".*$/TIMEZONE=\"$zone\/$subzone\"/g" /etc/rc.conf
		fi		
	else
		ln -sf /usr/share/zoneinfo/$zone /etc/localtime
		if [[ -h /etc/s6.conf ]]; then
			sed -i "s/TZ=.*$/TZ=$zone/g" /etc/s6/s6.conf
		else
			sed -i "s/TIMEZONE=\".*$/TIMEZONE=\"$zone\"/g" /etc/rc.conf
		fi
	fi
	
	echo_valid " Localetime was configured successfully"
}

pass_user(){
	passwd "$newuser"
	while [[ $? -ne 0 ]]; do
		echo_retry " Password do not match, please retry"
		passwd "$newuser"
	done
}

config_user(){
	
	useradd -m -g users -G "audio,floppy,log,network,rfkill,scanner,storage,optical,power,wheel,video" -s /usr/bin/zsh "$newuser"
	echo_display " You need to define $newuser password"
	pass_user
	
	echo_valid " User $newuser was created successfully" 
}

config_keymap(){
	if [[ -h /etc/s6.conf ]]; then
		sed -i "s,KEYMAP=.*$,KEYMAP=$keymap,g" /etc/s6/s6.conf
	else
		sed -i "s,KEYMAP=\".*$,KEYMAP=\"$keymap\",g" /etc/rc.conf
	fi
	
	echo_valid " Console keymap was configured successfully"
}

config_xkeymap(){
	if [[ -e "/home/$newuser/.xinitrc" ]]; then
		echo_notvalid " Define locale in /home/$newuser/.xinitrc"
		sed -i 's/#setxkbmap.*$/setxkbmap\ '$xkeymap'\ \&/g' /home/$newuser/.xinitrc
		sed -i 's/setxkbmap.*$/setxkbmap\ '$xkeymap'\ \&/g' /home/$newuser/.xinitrc
	fi
	
	if [[ -e "/root/.xinitrc" ]]; then
		echo_notvalid " Define locale in /root/.xinitrc"
		sed -i 's/#setxkbmap.*$/setxkbmap\ '$xkeymap'\ \&/g' /root/.xinitrc
		sed -i 's/setxkbmap.*$/setxkbmap\ '$xkeymap'\ \&/g' /root/.xinitrc
	fi
	
	echo_valid " Desktop keymap was configured successfully"
}

##		Edit rc.conf

edit_rc_conf(){
	if [[ -h /etc/s6.conf ]]; then
		edit_file "s6.conf" "/etc/s6" "$editor"
	else
		edit_file "rc.conf" "/etc/s6" "$editor"
	fi
	
}

##		Define resolv.conf

define_resolv(){
	echo_display " Define resolv.conf"
	if [[ -e /etc/resolv.conf.pacorig ]]; then 
		mv /etc/resolv.conf.pacorig /etc/resolv.conf
	fi
}


##		Enter in the fresh installation with mc

mc_enter(){
	mc /
}

##		Remove once_file

clean_once_file(){
	local action dir f_
	action="${1}"
	dir="${2}"
	if [[ -d "${src_functions}" ]]; then
		file_list=$(ls $dir/ | uniq) 
		file_list+=" Remove_all_files"
		file_list+=" Exit"
		select file in $file_list; do
			case $file in 
				Exit)break;;
				Remove_all_files) 	for f_ in $file_list; do
										if [[ ! "$f_" = @(Exit|Remove_all_files) ]]; then
											"$action" "$dir/$f_"
										fi
									done;;
				*)if check_elements "$file" $file_list; then
						"$action" "${dir}/${file}"
						clean_once_file "$action" "$dir"				
				else 
					echo_retry " Invalid number, retry :"
					clean_once_file "$action" "$dir"
				fi
			esac
			break
		done
	else
		echo_info " Directory /root/tmp/obarun-install does not exist"
	fi
}
	
##		Define/configure Bootloader

# TODO : let the choice at user to choose between bootloader
#define_bootloader(){
	
#}

syslinux_install(){
	local opts="$1"
	echo_display " Installing bootloader: syslinux"
	syslinux-install_update $opts
	
	echo_display " Maybe the partition name in the root parameter needs to be replaced."
	echo_display " Be sure to point the root partition in the line APPEND."
	syslinux_edit
	echo_valid " Syslinux install terminate"
}

syslinux_edit(){
	echo_display " Do you want edit syslinux.cfg [y|n]"
	reply_answer
	if (( ! "$rc" )); then
		unset rc
		check_editor
		"$editor" "/boot/syslinux/syslinux.cfg"
	fi
}

syslinux_menu(){

	local step=100 options=""

	while [[ "$step" != 5 ]]; do
		clear
	
		echo_bold ""
		echo_bold ""
		echo_info_menu "**************************************************************"
		echo_info_menu "              Syslinux configuration menu"
		echo_info_menu "**************************************************************"
		echo_bold ""
		echo_bold " 1 - Install files, set boot flag, install MBR ${green}[-iam]"
		echo_bold " 2 - Install files, set boot flag ${green}[-ia]"
		echo_bold " 3 - Install only MBR ${green}[-m]"
		echo_bold " 4 - Only set boot flag ${green}[-a]"
		echo_bold ""
		echo_bold " ${red}5 - Exit"
		echo_bold ""
		echo_bold ""
		echo_display " Enter your choice :";read step

			case "$step" in
				1)	options="-iam"
					break;;
				2) 	options="ia"
					break;;
				3) 	options="-m"
					break;;
				4) 	options="-a"
					break;;
				5) 	echo_info " Exiting"
					exit;;
				*) 	echo_retry " Invalid number, please retry:"
					echo_display " Press enter to return to syslinux configuration menu"
					read enter;;
			esac	
	done
	
	syslinux_install "$options"
}


